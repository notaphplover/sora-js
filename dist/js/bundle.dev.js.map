{"version":3,"sources":["dist/js/node_modules/browser-pack/_prelude.js","dist/js/dist/js/tmp/src/animation/animation-engine.ts","dist/js/dist/js/tmp/src/animation/animation-operation-events.ts","dist/js/dist/js/tmp/src/animation/animation-play-state.ts","dist/js/dist/js/tmp/src/carousel/carousel-base.ts","dist/js/dist/js/tmp/src/carousel/single-slide/single-slide-carousel.ts","dist/js/dist/js/tmp/src/collection/cancelable-collection-change-args.ts","dist/js/dist/js/tmp/src/collection/collection-change-args.ts","dist/js/dist/js/tmp/src/collection/collection-manager.ts","dist/js/dist/js/tmp/src/collection/html-children-manager.ts","dist/js/dist/js/tmp/src/collection/token-map.ts","dist/js/dist/js/tmp/src/main.ts","dist/js/dist/js/tmp/src/task/flow/task-flow-when.ts","dist/js/dist/js/tmp/src/task/flow/task-part-constraint.ts","dist/js/dist/js/tmp/src/task/operation/operation-manager.ts","dist/js/dist/js/tmp/src/task/task-engine.ts","dist/js/dist/js/tmp/src/task/task-part-when-events.ts","dist/js/dist/js/tmp/src/task/task-part-when-operator.ts","dist/js/node_modules/@babel/runtime/helpers/assertThisInitialized.js","dist/js/node_modules/@babel/runtime/helpers/classCallCheck.js","dist/js/node_modules/@babel/runtime/helpers/createClass.js","dist/js/node_modules/@babel/runtime/helpers/get.js","dist/js/node_modules/@babel/runtime/helpers/getPrototypeOf.js","dist/js/node_modules/@babel/runtime/helpers/inherits.js","dist/js/node_modules/@babel/runtime/helpers/interopRequireDefault.js","dist/js/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","dist/js/node_modules/@babel/runtime/helpers/setPrototypeOf.js","dist/js/node_modules/@babel/runtime/helpers/superPropBase.js","dist/js/node_modules/@babel/runtime/helpers/typeof.js","dist/js/node_modules/core-js/fn/promise.js","dist/js/node_modules/core-js/modules/_a-function.js","dist/js/node_modules/core-js/modules/_add-to-unscopables.js","dist/js/node_modules/core-js/modules/_an-instance.js","dist/js/node_modules/core-js/modules/_an-object.js","dist/js/node_modules/core-js/modules/_array-includes.js","dist/js/node_modules/core-js/modules/_classof.js","dist/js/node_modules/core-js/modules/_cof.js","dist/js/node_modules/core-js/modules/_core.js","dist/js/node_modules/core-js/modules/_ctx.js","dist/js/node_modules/core-js/modules/_defined.js","dist/js/node_modules/core-js/modules/_descriptors.js","dist/js/node_modules/core-js/modules/_dom-create.js","dist/js/node_modules/core-js/modules/_enum-bug-keys.js","dist/js/node_modules/core-js/modules/_export.js","dist/js/node_modules/core-js/modules/_fails.js","dist/js/node_modules/core-js/modules/_for-of.js","dist/js/node_modules/core-js/modules/_global.js","dist/js/node_modules/core-js/modules/_has.js","dist/js/node_modules/core-js/modules/_hide.js","dist/js/node_modules/core-js/modules/_html.js","dist/js/node_modules/core-js/modules/_ie8-dom-define.js","dist/js/node_modules/core-js/modules/_invoke.js","dist/js/node_modules/core-js/modules/_iobject.js","dist/js/node_modules/core-js/modules/_is-array-iter.js","dist/js/node_modules/core-js/modules/_is-object.js","dist/js/node_modules/core-js/modules/_iter-call.js","dist/js/node_modules/core-js/modules/_iter-create.js","dist/js/node_modules/core-js/modules/_iter-define.js","dist/js/node_modules/core-js/modules/_iter-detect.js","dist/js/node_modules/core-js/modules/_iter-step.js","dist/js/node_modules/core-js/modules/_iterators.js","dist/js/node_modules/core-js/modules/_library.js","dist/js/node_modules/core-js/modules/_microtask.js","dist/js/node_modules/core-js/modules/_new-promise-capability.js","dist/js/node_modules/core-js/modules/_object-create.js","dist/js/node_modules/core-js/modules/_object-dp.js","dist/js/node_modules/core-js/modules/_object-dps.js","dist/js/node_modules/core-js/modules/_object-gpo.js","dist/js/node_modules/core-js/modules/_object-keys-internal.js","dist/js/node_modules/core-js/modules/_object-keys.js","dist/js/node_modules/core-js/modules/_perform.js","dist/js/node_modules/core-js/modules/_promise-resolve.js","dist/js/node_modules/core-js/modules/_property-desc.js","dist/js/node_modules/core-js/modules/_redefine-all.js","dist/js/node_modules/core-js/modules/_redefine.js","dist/js/node_modules/core-js/modules/_set-species.js","dist/js/node_modules/core-js/modules/_set-to-string-tag.js","dist/js/node_modules/core-js/modules/_shared-key.js","dist/js/node_modules/core-js/modules/_shared.js","dist/js/node_modules/core-js/modules/_species-constructor.js","dist/js/node_modules/core-js/modules/_string-at.js","dist/js/node_modules/core-js/modules/_task.js","dist/js/node_modules/core-js/modules/_to-absolute-index.js","dist/js/node_modules/core-js/modules/_to-integer.js","dist/js/node_modules/core-js/modules/_to-iobject.js","dist/js/node_modules/core-js/modules/_to-length.js","dist/js/node_modules/core-js/modules/_to-object.js","dist/js/node_modules/core-js/modules/_to-primitive.js","dist/js/node_modules/core-js/modules/_uid.js","dist/js/node_modules/core-js/modules/_user-agent.js","dist/js/node_modules/core-js/modules/_wks.js","dist/js/node_modules/core-js/modules/core.get-iterator-method.js","dist/js/node_modules/core-js/modules/es6.array.iterator.js","dist/js/node_modules/core-js/modules/es6.object.to-string.js","dist/js/node_modules/core-js/modules/es6.promise.js","dist/js/node_modules/core-js/modules/es6.string.iterator.js","dist/js/node_modules/core-js/modules/es7.promise.finally.js","dist/js/node_modules/core-js/modules/es7.promise.try.js","dist/js/node_modules/core-js/modules/web.dom.iterable.js","dist/js/node_modules/events/events.js"],"names":[],"mappings":"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J,CAAkB,UAAS,OAAT,EAAkB,MAAlB,EAAwB;AAC7C,QAAA,UAAU,CAAC,YAAA;AACP,cAAI,UAAU,CAAC,KAAX,IAAoB,IAAxB,EAA8B;AAC1B,YAAA,OAAO;AACV,WAFD,MAEO;AACH,YAAA,IAAI,CAAC,kBAAL,CAAwB,UAAU,CAAC,KAAnC,EACK,IADL,CACU,OADV;AAEH;AACJ,SAPS,EAOP,UAAU,CAAC,MAPJ,CAAV;AAQH,OATM,CAAP;AAUH;;;;;;;;;;;;;;ACxTE,IAAM,qBAAqB,GAAG;AAIjC,EAAA,GAAG,EAAE,UAJ4B;AAQjC,EAAA,KAAK,EAAE;AAR0B,CAA9B;;;;;;;;;;ACAP,IAAY,oBAAZ;;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAI5B,EAAA,oBAAA,CAAA,oBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AAIA,EAAA,oBAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AACH,CATD,EAAY,oBAAoB,oCAApB,oBAAoB,GAAA,EAAA,CAAhC;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpfile":"bundle.dev.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { CAROUSEL_STYLES } from '../carousel/carousel-base';\r\nimport { OperationManager } from '../task/operation/operation-manager';\r\nimport { TaskEngine } from '../task/task-engine';\r\nimport { IAnimationCancelEventArgs } from './animation-cancel-event-args';\r\nimport { IAnimationFlowPart } from './animation-flow-part';\r\nimport { ANIMATION_OPERATION_EVENTS } from './animation-operation-events';\r\nimport { AnimationPlayStateValue } from './animation-play-state';\r\nimport { IAnimationStateChangeEventArgs } from './animation-state-change-event-args';\r\n\r\n/**\r\n * Represents a single animation engine.\r\n */\r\nexport class SingleAnimationEngine extends TaskEngine<IAnimationFlowPart> {\r\n\r\n    //#region Attributes\r\n\r\n    //#region Operators\r\n\r\n    /**\r\n     * Animation cancel operation manager.\r\n     */\r\n    protected animationCancelManager: OperationManager<IAnimationCancelEventArgs>;\r\n\r\n    /**\r\n     * Animation state change operation manager.\r\n     */\r\n    protected animationStateChangeManager: OperationManager<IAnimationStateChangeEventArgs>;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     */\r\n    public constructor() {\r\n        super();\r\n\r\n        this.animationCancelManager =\r\n            new OperationManager<IAnimationCancelEventArgs>(\r\n                ANIMATION_OPERATION_EVENTS.ANIMATION_CANCEL,\r\n                this.eventEmitter,\r\n            );\r\n        this.animationStateChangeManager =\r\n            new OperationManager<IAnimationStateChangeEventArgs>(\r\n                ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE,\r\n                this.eventEmitter,\r\n            );\r\n    }\r\n\r\n    //#region Public\r\n\r\n    /**\r\n     * Disposes the instance.\r\n     */\r\n    public dispose() {\r\n        this.animationCancelManager.dispose();\r\n        this.animationStateChangeManager.dispose();\r\n    }\r\n\r\n    //#region Operations\r\n\r\n    /**\r\n     * Cancels the animation.\r\n     * @param aliases Aliases of the parts to cancel or null to cancel all the parts.\r\n     */\r\n    public cancelAnimation(aliases: string[]): void {\r\n        this.eventEmitter.emit(\r\n            ANIMATION_OPERATION_EVENTS.ANIMATION_CANCEL,\r\n            { aliases : aliases } as IAnimationCancelEventArgs,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Pauses the engine animation.\r\n     * @param aliases Aliases of the animation parts to pause or null to pause all the parts.\r\n     */\r\n    public pause(aliases: string[]): void {\r\n        this.eventEmitter.emit(\r\n            ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE,\r\n            {\r\n                aliases: aliases,\r\n                value: AnimationPlayStateValue.paused,\r\n            } as IAnimationStateChangeEventArgs,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Resumes the engine animation.\r\n     * @param aliases Aliases of the animation parts to resume or null to resume all the parts.\r\n     */\r\n    public resume(aliases: string[]): void {\r\n        this.eventEmitter.emit(\r\n            ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE,\r\n            {\r\n                aliases: aliases,\r\n                value: AnimationPlayStateValue.running,\r\n            } as IAnimationStateChangeEventArgs,\r\n        );\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Handles an animation part.\r\n     *\r\n     * @param animationFlow Animation flow that contains the anmation part to handle.\r\n     * @param part Animation part to handle.\r\n     * @param eventEmitter Event emitter for the animation.\r\n     *\r\n     * @returns Promise resolved once the animation of the part is finished.\r\n     */\r\n    protected handleTaskPart(part: IAnimationFlowPart): Promise<void> {\r\n        const that = this;\r\n        part.pendingOperations = {\r\n            cancel: {\r\n                isPending: false,\r\n                operationToken: this.animationCancelManager.subscribe(\r\n                    part.alias,\r\n                    function(eventArgs: IAnimationCancelEventArgs) {\r\n                        part.pendingOperations.cancel.isPending = true;\r\n                        that.animationCancelManager.unsubscribe(\r\n                            part.alias, part.pendingOperations.cancel.operationToken,\r\n                        );\r\n                    },\r\n                ),\r\n            },\r\n            pause: {\r\n                isPending: false,\r\n                operationToken: this.animationStateChangeManager.subscribe(\r\n                    part.alias,\r\n                    function(eventArgs: IAnimationStateChangeEventArgs) {\r\n                        part.pendingOperations.pause.isPending =\r\n                            eventArgs.value === AnimationPlayStateValue.paused;\r\n                    },\r\n                ),\r\n            },\r\n        };\r\n\r\n        return super.handleTaskPart(part);\r\n    }\r\n\r\n    /**\r\n     * Performs a task part.\r\n     * @param part Task part to be performed.\r\n     * @returns Promise resolved once the part task is performed.\r\n     */\r\n    protected performTask(part: IAnimationFlowPart): PromiseLike<{} | void> {\r\n\r\n        if (part.pendingOperations) {\r\n            this.animationCancelManager.unsubscribe(part.alias, part.pendingOperations.cancel.operationToken);\r\n            this.animationStateChangeManager.unsubscribe(part.alias, part.pendingOperations.pause.operationToken);\r\n        }\r\n\r\n        const promises: Array<Promise<void>> = new Array(part.elements.length);\r\n\r\n        // 2. Perform the animation.\r\n        for (var i = 0; i < part.elements.length; ++i) {\r\n            promises[i] = this.handleAnimationOverElement(part.elements[i], part);\r\n        }\r\n\r\n        if (part.pendingOperations) {\r\n            if (part.pendingOperations.pause.isPending) {\r\n                this.pause([part.alias]);\r\n                part.pendingOperations.pause.isPending = false;\r\n            }\r\n\r\n            if (part.pendingOperations.cancel.isPending) {\r\n                this.cancelAnimation([part.alias]);\r\n                part.pendingOperations.cancel.isPending = false;\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    //#region Element animation\r\n\r\n    /**\r\n     * Handles the animation over an element.\r\n     *\r\n     * @param element element to be animated.\r\n     * @param part Part that contains the element to be animated.\r\n     *\r\n     * @returns Promise resolved once the animation over the element is finished.\r\n     */\r\n    protected handleAnimationOverElement(element: HTMLElement, part: IAnimationFlowPart): Promise<void> {\r\n        const styles: string[] = part.styles;\r\n\r\n        if (styles) {\r\n            if (styles.length < 1) {\r\n                throw new Error('It\\'s required to have at least one class to generate an animation.');\r\n            }\r\n        } else {\r\n            throw new Error('It\\'s required to have an array of styles to generate an animation.');\r\n        }\r\n\r\n        const that = this;\r\n\r\n        return new Promise<void>(function(resolve, reject) {\r\n            try {\r\n                const animationFunctions: Array<((event: TransitionEvent) => void)> = new Array();\r\n                var currentAnimationIndex: number = null;\r\n\r\n                const onAnimationCancel = function(args: IAnimationCancelEventArgs) {\r\n                    // Resume the animation if it is paused.\r\n                    onAnimationPlayStateChange({aliases: args.aliases, value: AnimationPlayStateValue.running});\r\n\r\n                    element.classList.add(CAROUSEL_STYLES.CLEAR_ANIMATION);\r\n\r\n                    if (null != currentAnimationIndex) {\r\n                        element.classList.remove(styles[currentAnimationIndex]);\r\n                    }\r\n\r\n                    that.unregisterAnimationListener(element, animationFunctions[currentAnimationIndex]);\r\n                    element.classList.remove(CAROUSEL_STYLES.CLEAR_ANIMATION);\r\n\r\n                    that.animationCancelManager.unsubscribe(part.alias, cancelToken);\r\n                    that.animationStateChangeManager.unsubscribe(part.alias, playStateChangetoken);\r\n\r\n                    resolve();\r\n                };\r\n\r\n                const cancelToken = that.animationCancelManager.subscribe(part.alias, onAnimationCancel);\r\n\r\n                const onAnimationPlayStateChange = function(args: IAnimationStateChangeEventArgs) {\r\n                    if (AnimationPlayStateValue.paused === args.value) {\r\n                        if (!element.classList.contains(CAROUSEL_STYLES.ANIMATION_PAUSED)) {\r\n                            element.classList.add(CAROUSEL_STYLES.ANIMATION_PAUSED);\r\n                        }\r\n                    } else if (AnimationPlayStateValue.running === args.value) {\r\n                        if (element.classList.contains(CAROUSEL_STYLES.ANIMATION_PAUSED)) {\r\n                            element.classList.remove(CAROUSEL_STYLES.ANIMATION_PAUSED);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                const playStateChangetoken =\r\n                    that.animationStateChangeManager.subscribe(part.alias, onAnimationPlayStateChange);\r\n\r\n                for (var i = 1; i < styles.length; ++i) {\r\n                    animationFunctions.push(function(index) {\r\n                        return function(event: TransitionEvent) {\r\n                            element.classList.remove(styles[index - 1]);\r\n                            that.unregisterAnimationListener(element, animationFunctions[index - 1]);\r\n                            that.registerAnimationListener(element, animationFunctions[index]);\r\n                            element.classList.add(styles[index]);\r\n                            currentAnimationIndex = index;\r\n                        };\r\n                    } (i));\r\n                }\r\n\r\n                // Add the clear function\r\n                animationFunctions.push(function(event: TransitionEvent) {\r\n                    element.classList.add(CAROUSEL_STYLES.CLEAR_ANIMATION);\r\n                    element.classList.remove(styles[styles.length - 1]);\r\n                    element.classList.remove(CAROUSEL_STYLES.CLEAR_ANIMATION);\r\n                    that.unregisterAnimationListener(element, animationFunctions[animationFunctions.length - 1]);\r\n                    currentAnimationIndex = null;\r\n                    that.animationCancelManager.unsubscribe(part.alias, cancelToken);\r\n                    that.animationStateChangeManager.unsubscribe(part.alias, playStateChangetoken);\r\n                    resolve();\r\n                });\r\n\r\n                that.registerAnimationListener(element, animationFunctions[0]);\r\n                element.classList.add(styles[0]);\r\n                currentAnimationIndex = 0;\r\n            } catch (ex) {\r\n                reject(ex);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the end of a transition over an element.\r\n     * @param element Element whose event will be handled.\r\n     * @param listener Event listener.\r\n     */\r\n    private registerAnimationListener(element: HTMLElement, listener: (element: TransitionEvent) => void): void {\r\n        element.addEventListener('animationend', listener);\r\n        element.addEventListener('webkitAnimationEnd', listener);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes an event handler from the list of listeners of an element\r\n     * @param element Target element.\r\n     * @param listener Listener to be unsubscribed.\r\n     */\r\n    private unregisterAnimationListener(element: HTMLElement, listener: (element: TransitionEvent) => void): void {\r\n        element.removeEventListener('animationend', listener);\r\n        element.removeEventListener('webkitAnimationEnd', listener);\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","export const ANIMATION_OPERATION_EVENTS = {\r\n    /**\r\n     * Forces the cancelation of the current animation.\r\n     */\r\n    ANIMATION_CANCEL: 'anim.cancel',\r\n    /**\r\n     * Changes the animation play state of the elements of the animation.\r\n     */\r\n    ANIMATION_STATE_CHANGE: 'anim.state.change',\r\n};\r\n","/**\r\n * Represents the play state of an animation\r\n */\r\nexport enum AnimationPlayStateValue {\r\n    /**\r\n     * Value to represent a paused status.\r\n     */\r\n    paused,\r\n    /**\r\n     * Value to represent a running status.\r\n     */\r\n    running,\r\n}\r\n","/**\n * Carousel classes used for multiple purposes.\n */\nexport const CAROUSEL_STYLES = {\n    ANIMATION_PAUSED: 'sora-animation-paused',\n    CAROUSEL: 'sora-carousel',\n    CLEAR_ANIMATION: 'sora-clear-animations',\n    SLIDE: 'sora-slide',\n    WRAPPER: 'sora-wrapper',\n};\n\n/**\n * Represents a generic carousel.\n *\n * 1. Any carousel has elements.\n * 2. Any carousel has a topology.\n * 3. Any carousel has transitions.\n */\nexport abstract class CarouselBase {\n    /**\n     * Carousel handler.\n     * 3. Any carousel has transitions.\n     * @param action action to be handled\n     * @param options options for the action.\n     */\n    public abstract handle(action: string, options: {[key: string]: any}): void;\n}\n","import { EventEmitter } from 'events';\nimport { SingleAnimationEngine } from '../../animation/animation-engine';\nimport { IAnimationFlowPart } from '../../animation/animation-flow-part';\nimport { AnimationPlayStateValue } from '../../animation/animation-play-state';\nimport { CancelableCollectionChangeEventArgs } from '../../collection/cancelable-collection-change-args';\nimport { CollectionChangeEventArgs } from '../../collection/collection-change-args';\nimport { COLLECTION_MANAGER_EVENTS } from '../../collection/collection-manager';\nimport { HtmlChildrenManager } from '../../collection/html-children-manager';\nimport { ITaskFlow } from '../../task/flow/task-flow';\nimport {\n    CAROUSEL_STYLES,\n    CarouselBase,\n} from '../carousel-base';\nimport {\n    ISingleSlideCarouselAnimationEndEventArgs,\n    ISingleSlideCarouselAnimationPlayStateChangeEventArgs,\n    ISingleSlideCarouselAnimationStartEventArgs,\n    ISingleSlideCarouselCancelAnimationEventArgs,\n} from './animation-events';\nimport { ICarouselAnimationChildrenStyles } from './carousel-animation';\nimport { ISingleSlideCarouselCreateWaitPromiseOptions } from './create-wait-promise-options';\nimport { ISingleSlideCarouselCreationOptions } from './creation-options';\nimport { ISingleSlideCarouselGoToAnimationStatus } from './go-to-animation-status';\nimport { ISingleSlideCarouselGotoOptions } from './go-to-options';\n\n/* #region Constants */\n\n/**\n * Actions avaiable for the SingleSlideCarousel.\n */\nexport const SINGLE_SLIDE_CAROUSEL_ACTIONS = {\n    GO_TO: 'to',\n    GO_TO_NEXT: 'next',\n    GO_TO_PREVIOUS: 'prev',\n};\n\n/**\n * Events directly handled by the carousel.\n */\nexport const SINGLE_SLIDE_CAROUSEL_EVENTS = {\n    ON_ANIMATION_END: 'car.anim.out',\n    ON_ANIMATION_PLAY_STATE_CHANGE: 'car.anim.state.ch',\n    ON_ANIMATION_START: 'car.anim.in',\n    ON_CANCEL_ANIMATION: 'car.anim.cancel',\n};\n\nexport const SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES = {\n    ENTER: 'enter-part',\n    LEAVE: 'leave-part',\n};\n\n/**\n * Carousel classes used for multiple purposes.\n */\nexport const SINGLE_SLIDE_CAROUSEL_STYLES = {\n    /**\n     * Style to apply to hidden slides.\n     */\n    SLIDE_HIDDEN: 'sora-hidden',\n    /**\n     * Style to apply to achieve position: relative.\n     */\n    SORA_RELATIVE: 'sora-relative',\n};\n\n/* #endregion */\n\n/**\n * Represents a carousel with a single active slide at a time.\n */\nexport class SingleSlideCarousel extends CarouselBase {\n\n    //#region Attributes\n\n    /**\n     * Active index of the elements of the carousel.\n     */\n    protected activeIndex: number;\n\n    /**\n     * Current active animation\n     */\n    protected currentAnimation: ISingleSlideCarouselGotoOptions;\n\n    /**\n     * collection manager\n     */\n    protected elementsManager: HtmlChildrenManager;\n\n    /**\n     * Engine animation.\n     */\n    protected engineAnimation: SingleAnimationEngine;\n\n    /**\n     * Flag to determine if the carousel animation is paused.\n     */\n    protected paused: boolean;\n\n    //#endregion\n\n    //#region Events\n\n    /**\n     * Event emitter for this instance\n     */\n    protected eventEmitter: EventEmitter;\n\n    //#endregion\n\n    /**\n     * Creates a new instance of this class.\n     * @param element DOM element associated to the carousel.\n     */\n    public constructor(element: HTMLElement, options: ISingleSlideCarouselCreationOptions) {\n        super();\n\n        if (element == null) {\n            throw new Error('The element must not be null.');\n        }\n        if (!element.classList.contains(CAROUSEL_STYLES.CAROUSEL)) {\n            throw new Error('The carousel element must contain the class \"' + CAROUSEL_STYLES.CAROUSEL + '\".');\n        }\n\n        const soraWrapper = element.querySelector('.' + CAROUSEL_STYLES.WRAPPER);\n\n        if (soraWrapper == null) {\n            throw new Error('The element has no child with class \\'sora-wrapper\\'.');\n        }\n\n        const children: HTMLElement[] = new Array();\n\n        for (var i = 0; i < soraWrapper.children.length; ++i) {\n            if (soraWrapper.children[i].classList.contains(CAROUSEL_STYLES.SLIDE)) {\n                children.push(soraWrapper.children[i] as HTMLElement);\n            }\n        }\n\n        this.activeIndex = options.index || 0;\n        this.currentAnimation = null;\n        this.eventEmitter = new EventEmitter();\n        this.elementsManager = new HtmlChildrenManager(children, this.eventEmitter, soraWrapper as HTMLElement);\n\n        if (this.activeIndex < 0 || this.activeIndex >= this.elementsManager.getLength()) {\n            throw new Error('Invalid options.index. There is no element with index ' + options.index + '.');\n        }\n\n        for (var i = 0; i < children.length; ++i) {\n            if (i === this.activeIndex) {\n                children[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n            } else {\n                children[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            }\n        }\n\n        const that = this;\n\n        // Add listeners\n        const onBeforeChange = function(eventArgs: CancelableCollectionChangeEventArgs<HTMLElement>) {\n            const indexMap = eventArgs.getIndexMap();\n            if (null == indexMap[that.activeIndex]) {\n                eventArgs.setPreventDefault();\n            }\n        };\n\n        const onAfterChange = function(eventArgs: CollectionChangeEventArgs<HTMLElement>) {\n            if (!eventArgs.getPreventDefault()) {\n                const indexMap = eventArgs.getIndexMap();\n                that.activeIndex = indexMap[that.activeIndex];\n            }\n        };\n\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n\n        this.engineAnimation = new SingleAnimationEngine();\n    }\n\n    //#region Public\n\n    /**\n     * Subscribes a listener to an event of the carousel.\n     * @param event Event to listen.\n     * @param listener Listener to subscribe.\n     */\n    public addListener(event: string | symbol, listener: (... args: any[]) => void): void {\n        this.eventEmitter.addListener(event, listener);\n    }\n\n    /**\n     * Creates a promise that waits for a time. The amount of time\n     * @param options ISingleSlideCarouselCreateWaitPromiseOptions.\n     */\n    public createWaitPromise(options: ISingleSlideCarouselCreateWaitPromiseOptions): Promise<void> {\n        const that = this;\n        return new Promise<void>(function(resolve, reject) {\n            var lastTimeRun: number;\n            var timeToWait = options.millis;\n\n            if (that.paused) {\n                lastTimeRun = null;\n            } else {\n                var waitInterval = setInterval(function() {\n                    removeListeners();\n                    resolve();\n                }, timeToWait);\n                lastTimeRun = new Date().getTime();\n            }\n\n            var onCancelAnimation: () => void = null;\n\n            if (options.stopOnCancelAnimation) {\n                onCancelAnimation = function() {\n                    removeListeners();\n                    resolve();\n                };\n                that.addListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, onCancelAnimation);\n            }\n\n            const onPlayStateChange = function(args: ISingleSlideCarouselAnimationPlayStateChangeEventArgs) {\n                if (AnimationPlayStateValue.paused === args.value) {\n                    // Pause\n                    timeToWait = timeToWait - (new Date().getTime() - lastTimeRun);\n                    clearInterval(waitInterval);\n                } else if (AnimationPlayStateValue.running === args.value) {\n                    // Resume\n                    lastTimeRun = new Date().getTime();\n\n                    if (0 < timeToWait) {\n                        waitInterval = setInterval(function() {\n                            that.removeListener(\n                                SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE,\n                                onPlayStateChange,\n                            );\n                            if (null != onCancelAnimation) {\n                                that.removeListener(\n                                    SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION,\n                                    onCancelAnimation,\n                                );\n                            }\n                            resolve();\n                        }, timeToWait);\n                    } else {\n                        removeListeners();\n                        resolve();\n                    }\n                }\n            };\n\n            const removeListeners = function() {\n                that.removeListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n                if (null != onCancelAnimation) {\n                    that.removeListener(\n                        SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION,\n                        onCancelAnimation,\n                    );\n                }\n            };\n\n            that.addListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n        });\n    }\n\n    /**\n     * Forces the carousel to change its active slide. Any animation will be canceled in the process.\n     * @param activeIndex Index of the new active slide of the carousel.\n     */\n    public forceActiveSlide(activeIndex: number) {\n        const eventArgs: ISingleSlideCarouselCancelAnimationEventArgs = { activeIndex: activeIndex };\n\n        this.engineAnimation.cancelAnimation(null);\n        // The call over cancelAnimation will resume any paused animation.\n        this.paused = false;\n        this.activeIndex = activeIndex;\n        this.resetCarouselStructure(activeIndex);\n\n        this.eventEmitter.emit(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, eventArgs);\n    }\n\n    /**\n     * Obtains the active slide of the carousel\n     */\n    public getActiveElement(): HTMLElement {\n        return this.elementsManager.getCollection()[this.activeIndex];\n    }\n\n    /**\n     * Obtains the active index in the elements array of the carousel\n     */\n    public getActiveIndex(): number {\n        return this.activeIndex;\n    }\n\n    /**\n     * Returns the collection manager of the instance.\n     * @returns Collection manager of the slide elements.\n     */\n    public getElementsManager(): HtmlChildrenManager {\n        return this.elementsManager;\n    }\n\n    /**\n     * Determines if the carousel has an active animation, even if the animation is Paused.\n     * @returns True if the carousel has an active animation.\n     */\n    public hasActiveAnimation(): boolean {\n        return null != this.currentAnimation;\n    }\n\n    public handle(action: string, options: {[key: string]: any}): ISingleSlideCarouselGoToAnimationStatus {\n        switch (action) {\n            case SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO:\n                if (options == null || typeof options.index !== 'number') {\n                    throw new Error('Invalid options for \\'' + SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO + '\\'.');\n                }\n                return this.handleGoTo(options as ISingleSlideCarouselGotoOptions);\n            case SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_NEXT:\n                options.index = (this.activeIndex + 1) % this.elementsManager.getLength();\n                return this.handle(SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO, options);\n            case SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_PREVIOUS:\n                const elementsLength = this.elementsManager.getLength();\n                options.index = ((this.activeIndex - 1) % elementsLength + elementsLength) % elementsLength;\n                return this.handle(SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO, options);\n        }\n    }\n\n    /**\n     * Returns true if the carousel animation is paused.\n     * @returns True if the carousel is paused and false in any other case.\n     */\n    public isPaused() {\n        return this.paused;\n    }\n\n    /**\n     * Pauses the animations currently handled by the carousel.\n     */\n    public pause(): void {\n        if (!this.paused) {\n            this.engineAnimation.pause(null);\n            this.paused = true;\n            this.eventEmitter.emit(\n                SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE,\n                { value : AnimationPlayStateValue.paused } as ISingleSlideCarouselAnimationPlayStateChangeEventArgs,\n            );\n        }\n    }\n\n    /**\n     * Unsubscribes a listener to an event of the carousel.\n     * @param event Event associated.\n     * @param listener Listener to unsubscribe.\n     */\n    public removeListener(event: string | symbol, listener: (... args: any[]) => void): void {\n        this.eventEmitter.removeListener(event, listener);\n    }\n\n    /**\n     * Resumes the animations currently handled by the carousel.\n     */\n    public resume(): void {\n        if (this.paused) {\n            this.engineAnimation.resume(null);\n            this.paused = false;\n            this.eventEmitter.emit(\n                SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE,\n                { value: AnimationPlayStateValue.running } as ISingleSlideCarouselAnimationPlayStateChangeEventArgs,\n            );\n        }\n    }\n\n    //#endregion\n\n    //#region Protected\n\n    /**\n     * Creates an animation flow based on animation options.\n     *\n     * @param enterElement Element to apply the enter animation.\n     * @param leaveElement Element to apply the leave animation.\n     * @param options Animation options.\n     *\n     * @returns Animation flow from the animation options.\n     */\n    protected generateGoToAnimationFlow(\n        enterElement: HTMLElement,\n        leaveElement: HTMLElement,\n        options: ISingleSlideCarouselGotoOptions,\n    ): ITaskFlow<IAnimationFlowPart> {\n        const innerParts: IAnimationFlowPart[] = [\n            {\n                alias: SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.ENTER,\n                elements: [ enterElement ],\n                styles: options.enterAnimation.slideStyles,\n                when: null,\n            },\n            {\n                alias: SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.LEAVE,\n                elements: [ leaveElement ],\n                styles: options.leaveAnimation.slideStyles,\n                when: null,\n            },\n        ];\n\n        const generateChildrenParts = function(\n            parentElement: HTMLElement,\n            childrenStyles: ICarouselAnimationChildrenStyles[],\n            aliasBase: string,\n        ) {\n            if (childrenStyles) {\n                for (var i = 0; i < childrenStyles.length; ++i) {\n                    innerParts.push({\n                        alias: aliasBase + i.toString(),\n                        elements: function(): HTMLElement[] {\n                            const elements: HTMLElement[] = new Array();\n                            const animationObject: ICarouselAnimationChildrenStyles = childrenStyles[i];\n                            const childrenElements = parentElement.querySelectorAll(animationObject.selector);\n\n                            for (const childrenElement of childrenElements) {\n                                elements.push(childrenElement as HTMLElement);\n                            }\n\n                            return elements;\n                        } (),\n                        styles: childrenStyles[i].styles,\n                        when: null,\n                    });\n                }\n            }\n        };\n\n        generateChildrenParts(\n            enterElement,\n            options.enterAnimation.childrenStyles,\n            SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.ENTER,\n        );\n        generateChildrenParts(\n            leaveElement,\n            options.leaveAnimation.childrenStyles,\n            SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.LEAVE,\n        );\n\n        const innerPartsMap: { [key: string]: IAnimationFlowPart } = { };\n\n        for (const innerPart of innerParts) {\n            innerPartsMap[innerPart.alias] = innerPart;\n        }\n        const animationFlow: ITaskFlow<IAnimationFlowPart> = {\n            parts: innerParts,\n        };\n\n        return animationFlow;\n    }\n\n    /**\n     * Resets the carousel structure. Sets a new active element for the carousel.\n     * @param activeIndex Current active index.\n     */\n    protected resetCarouselStructure(activeIndex: number) {\n        // This operation is atomic in a single-thread environment, so we can store the collection.\n        const collection = this.elementsManager.getCollection();\n        for (var i = 0; i < collection.length; ++i) {\n            while (collection[i].classList.length > 0) {\n                collection[i].classList.remove(collection[i].classList.item(0));\n            }\n\n            collection[i].classList.add(CAROUSEL_STYLES.SLIDE);\n\n            if (i === activeIndex) {\n                collection[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n            } else {\n                collection[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            }\n        }\n    }\n\n    //#endregion\n\n    //#region Private\n\n    /**\n     * Handles the GoTo operation.\n     * @param options Options with the index and the custom animation to display.\n     */\n    private handleGoTo(options: ISingleSlideCarouselGotoOptions): ISingleSlideCarouselGoToAnimationStatus {\n        if (options.index < 0 || options.index >= this.elementsManager.getLength()) {\n            throw new Error('Invalid index. There is no element with index ' + options.index + '.');\n        }\n\n        if (options.index === this.activeIndex) {\n            throw new Error('Invalid index. It\\'s not allowed to go to the current active slide');\n        }\n        if (null == this.currentAnimation) {\n            this.currentAnimation = options;\n        } else {\n            throw new Error(\n                'It\\'s not allowed to start an animation while an existing animation over an slide element is active',\n            );\n        }\n\n        const oldActiveElement = this.elementsManager.getCollection()[this.activeIndex];\n        var newActiveIndex: number = options.index;\n\n        this.eventEmitter.emit(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_START, {\n            options: options,\n        } as ISingleSlideCarouselAnimationStartEventArgs);\n\n        const that = this;\n\n        const onBeforeChange = function(eventArgs: CancelableCollectionChangeEventArgs<HTMLElement>) {\n            const indexMap = eventArgs.getIndexMap();\n            if (null == indexMap[newActiveIndex]) {\n                eventArgs.setPreventDefault();\n            }\n        };\n\n        const onAfterChange = function(eventArgs: CollectionChangeEventArgs<HTMLElement>) {\n            if (!eventArgs.getPreventDefault()) {\n                const indexMap = eventArgs.getIndexMap();\n                newActiveIndex = indexMap[newActiveIndex];\n            }\n        };\n\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n\n        const newActiveElement = this.elementsManager.getCollection()[newActiveIndex];\n\n        newActiveElement.classList.remove(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n\n        var animationCanceled = false;\n\n        const cancelAnimationHandler = function() {\n            animationCanceled = true;\n            that.currentAnimation = null;\n        };\n\n        const animationFlow = this.generateGoToAnimationFlow(newActiveElement, oldActiveElement, options);\n        const animationPromises: Array<Promise<void>> = this.engineAnimation.handle(animationFlow);\n        const ANIMATION_ENTER_INDEX: number = 0;\n        const ANIMATION_LEAVE_INDEX: number = 1;\n\n        const hideLeaveSlideAfterAnimationEnds = new Promise<void>(function(resolve, reject) {\n            animationPromises[ANIMATION_LEAVE_INDEX].then(function(animationOptions) {\n                if (!animationCanceled) {\n                    oldActiveElement.classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                    oldActiveElement.classList.remove(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n                    newActiveElement.classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n                }\n                resolve();\n            }).catch(function(err) {\n                reject(err);\n            });\n        });\n\n        this.addListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, cancelAnimationHandler);\n\n        const soraHandlerStatus: Promise<void> = new Promise<void>(function(resolve, reject) {\n            Promise.all([\n                animationPromises[ANIMATION_ENTER_INDEX],\n                hideLeaveSlideAfterAnimationEnds,\n            ]).then(function() {\n                if (!animationCanceled) {\n                    that.activeIndex = newActiveIndex;\n                    that.currentAnimation = null;\n                }\n\n                that.removeListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n                that.removeListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n                that.removeListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, cancelAnimationHandler);\n\n                that.eventEmitter.emit(\n                    SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_END,\n                    {} as ISingleSlideCarouselAnimationEndEventArgs,\n                );\n\n                resolve();\n            }).catch(function(err) {\n                reject(err);\n            });\n        });\n\n        return {\n            animationPromises: animationPromises,\n            partEndEventAccess: that.engineAnimation.getPartEndListenerAccess(),\n            partStartEventAccess: that.engineAnimation.getPartStartListenerAccess(),\n            soraHandlerStatus: soraHandlerStatus,\n        };\n    }\n}\n","import { CollectionChangeEventArgs } from './collection-change-args';\r\n\r\nexport class CancelableCollectionChangeEventArgs<T> extends CollectionChangeEventArgs<T> {\r\n    /**\r\n     * Creates a new instance.\r\n     * @param indexMap Index map, from old indexes to new indexes.\r\n     * @param newElements New Elements array.\r\n     */\r\n    public constructor(indexMap: {[oldIndex: number]: number}, newElements: T[]) {\r\n        super(indexMap, newElements, false);\r\n    }\r\n\r\n    /**\r\n     * Sets the prevent default action flag to true.\r\n     */\r\n    public setPreventDefault(): void {\r\n        this.preventDefault = true;\r\n    }\r\n}\r\n","export class CollectionChangeEventArgs<T> {\r\n    /**\r\n     * Map from old indexes to new indexes\r\n     */\r\n    protected indexMap: {[oldIndex: number]: number};\r\n    /**\r\n     * new Elements array\r\n     */\r\n    protected newElements: T[];\r\n\r\n    /**\r\n     * Flag to prevent the default action (update the collection)\r\n     */\r\n    protected preventDefault: boolean;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     * @param indexMap Index map, from old indexes to new indexes.\r\n     * @param newElements New Elements array.\r\n     */\r\n    public constructor(indexMap: {[oldIndex: number]: number}, newElements: T[], preventDefault: boolean) {\r\n        this.indexMap = indexMap;\r\n        this.newElements = newElements;\r\n        this.preventDefault = preventDefault;\r\n    }\r\n\r\n    /**\r\n     * Returns a clone copy of the index map.\r\n     * The index map keys are the old indexes of the collection.\r\n     * The index map values are the new indexes for the old ones.\r\n     */\r\n    public getIndexMap(): {[oldIndex: number]: number} {\r\n        return Object.assign({}, this.indexMap);\r\n    }\r\n\r\n    /**\r\n     * Returns a clone copy of the collection that could be the new collection.\r\n     */\r\n    public getNewElements(): {[index: number]: T} {\r\n        return Object.assign({}, this.newElements);\r\n    }\r\n\r\n    /**\r\n     * Returns the prevent default action flag.\r\n     */\r\n    public getPreventDefault(): boolean {\r\n        return this.preventDefault;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { CancelableCollectionChangeEventArgs } from './cancelable-collection-change-args';\r\nimport { CollectionChangeEventArgs } from './collection-change-args';\r\n\r\nexport const COLLECTION_MANAGER_EVENTS = {\r\n    collectionAfterChange: 'coll.ch.a',\r\n    collectionBeforeChange: 'coll.ch.b',\r\n};\r\n\r\n/**\r\n * Collection manager.\r\n * Handles a collection of items and emits events on modifications of the managed collection.\r\n */\r\nexport class CollectionManager<T> {\r\n\r\n    /**\r\n     * Collection to manage\r\n     */\r\n    protected collection: T[];\r\n\r\n    /**\r\n     * Event emitter used to emit events\r\n     */\r\n    protected eventEmitter: EventEmitter;\r\n\r\n    /**\r\n     * Creates a new instance of the class.\r\n     * @param collection Collection to manage.\r\n     * @param eventEmitter Event emitter used to emit events.\r\n     */\r\n    public constructor(collection: T[], eventEmitter: EventEmitter) {\r\n        this.collection = collection;\r\n        this.eventEmitter = eventEmitter;\r\n    }\r\n\r\n    //#region Public\r\n\r\n    /**\r\n     * Returns the collection of elements managed.\r\n     * This is the real collection managed by the instance.\r\n     * Only read operations should be performed directly in the collection.\r\n     */\r\n    public getCollection(): T[] {\r\n        return this.collection;\r\n    }\r\n\r\n    /**\r\n     * Obtains the length of the collection.\r\n     * @returns Length of the collection managed.\r\n     */\r\n    public getLength(): number {\r\n        return this.collection.length;\r\n    }\r\n\r\n    /**\r\n     * Inserts a collection of elements at the selected indexes.\r\n     * @param elements Collection of index-element pairs representing the elements to be inserted.\r\n     */\r\n    public insertElements(elements: {[index: number]: T}): void {\r\n        this.internalInsertElements(elements);\r\n    }\r\n\r\n    /**\r\n     * Removes elements of the collection.\r\n     * @param indexes Indexes of the collection to be removed.\r\n     */\r\n    public removeElements(indexes: number[]): void {\r\n        this.internalRemoveElements(indexes);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Inserts a collection of elements at the selected indexes.\r\n     * @param elements Collection of index-element pairs representing the elements to be inserted.\r\n     */\r\n    protected internalInsertElements(elements: {[index: number]: T}): void {\r\n        var keys: number[] = new Array();\r\n        for (const elemIndex in elements) {\r\n            if (elements.hasOwnProperty(elemIndex)) {\r\n                const numberElemIndex = Number(elemIndex);\r\n                if (numberElemIndex < 0) {\r\n                    throw new Error('The index param should be greater or equals zero.');\r\n                }\r\n\r\n                if (numberElemIndex > this.collection.length) {\r\n                    throw new Error(\r\n                        'The index param should be less or equals the number of elements of the collection.',\r\n                    );\r\n                }\r\n                keys.push(numberElemIndex);\r\n            }\r\n        }\r\n\r\n        keys = keys.sort(function(number1, number2) {\r\n            return number1 - number2;\r\n        });\r\n\r\n        if (0 === keys.length) {\r\n            return;\r\n        }\r\n\r\n        const newElements: T[] = new Array(this.collection.length + keys.length);\r\n        const indexMap: {[oldIndex: number]: number} = {};\r\n\r\n        if (1 === keys.length) {\r\n            const index = keys[0];\r\n            const element = elements[index];\r\n\r\n            for (var i = 0; i < index; ++i) {\r\n                newElements[i] = this.collection[i];\r\n                indexMap[i] = i;\r\n            }\r\n\r\n            newElements[index] = element;\r\n\r\n            for (var i = index + 1; i < newElements.length; ++i) {\r\n                newElements[i] = this.collection[i - 1];\r\n                indexMap[i - 1] = i;\r\n            }\r\n        } else {\r\n            for (var i = 0; i < keys[0]; ++i) {\r\n                newElements[i] = this.collection[i];\r\n                indexMap[i] = i;\r\n            }\r\n\r\n            newElements[keys[0]] = elements[keys[0]];\r\n\r\n            for (var i = 1; i < keys.length; ++i) {\r\n                const indexPrevious = keys[i - 1];\r\n                const index = keys[i];\r\n                for (var j = indexPrevious + 1; j < index; ++j) {\r\n                    newElements[j] = this.collection[j - i];\r\n                    indexMap[j - i] = j;\r\n                }\r\n\r\n                newElements[index] = elements[index];\r\n            }\r\n\r\n            for (var i = keys[keys.length - 1] + 1; i < newElements.length; ++i) {\r\n                newElements[i] = this.collection[i - keys.length];\r\n                indexMap[i - keys.length] = i;\r\n            }\r\n        }\r\n\r\n        this.internalTryToChangeCollection(indexMap, newElements);\r\n    }\r\n\r\n    /**\r\n     * Removes elements of the collection.\r\n     * @param indexes Indexes of the collection to be removed.\r\n     */\r\n    protected internalRemoveElements(indexes: number[]): void {\r\n        // Sort indexes.\r\n        indexes = indexes.sort(function(number1, number2) {\r\n            return number1 - number2;\r\n        });\r\n\r\n        const indexMap: {[oldIndex: number]: number} = {};\r\n        const newElements: T[] = new Array();\r\n        var counter = 0;\r\n        for (var i = 0; i < this.collection.length; ++i) {\r\n            if (i === indexes[counter]) {\r\n                ++counter;\r\n            } else {\r\n                newElements[i - counter] = this.collection[i];\r\n                indexMap[i] = i - counter;\r\n            }\r\n        }\r\n\r\n        this.internalTryToChangeCollection(indexMap, newElements);\r\n    }\r\n\r\n    /**\r\n     * Attemps to change the collection managed by this instance.\r\n     * @param indexMap Map from old indexes to new indexes.\r\n     * @param newElements New elements to manage if the change is not prevented.\r\n     */\r\n    protected internalTryToChangeCollection(\r\n        indexMap: {[oldIndex: number]: number} = {},\r\n        newElements: T[],\r\n    ): CollectionChangeEventArgs<T> {\r\n        const cancelableChangeEventArgs = new CancelableCollectionChangeEventArgs(indexMap, newElements);\r\n        this.eventEmitter.emit(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, cancelableChangeEventArgs);\r\n\r\n        if (!cancelableChangeEventArgs.getPreventDefault()) {\r\n            this.collection = newElements;\r\n        }\r\n\r\n        const changeEventArgs = new CollectionChangeEventArgs<T>(\r\n            indexMap,\r\n            newElements,\r\n            cancelableChangeEventArgs.getPreventDefault(),\r\n        );\r\n        this.eventEmitter.emit(COLLECTION_MANAGER_EVENTS.collectionAfterChange, changeEventArgs);\r\n        return changeEventArgs;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { CollectionChangeEventArgs } from './collection-change-args';\r\nimport { CollectionManager } from './collection-manager';\r\n\r\nexport class HtmlChildrenManager extends CollectionManager<HTMLElement> {\r\n    /**\r\n     * Parent element of the members of the collection\r\n     */\r\n    protected parentElement: HTMLElement;\r\n\r\n    public constructor(collection: HTMLElement[], eventEmitter: EventEmitter, parentElement: HTMLElement) {\r\n        super(collection, eventEmitter);\r\n\r\n        this.parentElement = parentElement;\r\n    }\r\n\r\n    /**\r\n     * Attemps to change the collection managed by this instance.\r\n     * @param indexMap Map from old indexes to new indexes.\r\n     * @param newElements New elements to manage if the change is not prevented.\r\n     */\r\n    protected internalTryToChangeCollection(\r\n        indexMap: {[oldIndex: number]: number} = {},\r\n        newElements: HTMLElement[],\r\n    ): CollectionChangeEventArgs<HTMLElement> {\r\n        const eventArgs = super.internalTryToChangeCollection(indexMap, newElements);\r\n\r\n        if (!eventArgs.getPreventDefault()) {\r\n            // Perform DOM modifications.\r\n            var deletionPivot = 0;\r\n            var insertionPivot = 0;\r\n            var oldIndexesCounter = 0;\r\n            var newIndexesCounter = 0;\r\n\r\n            // Important: Keys must be guaranteed to be ordered!\r\n            for (const key in indexMap) {\r\n                if (indexMap.hasOwnProperty(key)) {\r\n                    const keyNumber: number = Number(key);\r\n                    for (var i = oldIndexesCounter; i < keyNumber; ++i) {\r\n                        // Delete old elements\r\n                        this.parentElement.removeChild(this.parentElement.children[i + insertionPivot - deletionPivot]);\r\n                        ++deletionPivot;\r\n                    }\r\n\r\n                    const newIndex: number = indexMap[key];\r\n                    for (var i = newIndexesCounter; i < newIndex; ++i) {\r\n                        // Insert new elements.\r\n                        this.parentElement.insertBefore(newElements[i], this.parentElement.children[i]);\r\n                        ++insertionPivot;\r\n                    }\r\n\r\n                    oldIndexesCounter = keyNumber + 1;\r\n                    newIndexesCounter = newIndex + 1;\r\n                }\r\n            }\r\n\r\n            for (var i = newIndexesCounter; i < newElements.length; ++i) {\r\n                this.parentElement.appendChild(newElements[i]);\r\n            }\r\n        }\r\n\r\n        return eventArgs;\r\n    }\r\n}\r\n","export class TokenMap<T> {\r\n    //#region Properties\r\n\r\n    /**\r\n     * Inner map.\r\n     */\r\n    protected innerMap: Map<number, T>;\r\n\r\n    /**\r\n     * List of unused indexed bellow the maximun used index.\r\n     */\r\n    protected unusedIndexes: number[];\r\n\r\n    //#endregion\r\n\r\n    public constructor() {\r\n        this.innerMap = new Map<number, T>();\r\n        this.unusedIndexes = new Array();\r\n    }\r\n\r\n    /**\r\n     * Adds an element to the array collection.\r\n     * @param elem Element to be added to the array.\r\n     * @returns index in which the element is located.\r\n     */\r\n    public add(elem: T): number {\r\n        if (0 === this.unusedIndexes.length) {\r\n            const lastIndex: number = this.innerMap.size;\r\n            this.innerMap.set(lastIndex, elem);\r\n            return lastIndex;\r\n        } else {\r\n            const lastIndex: number = this.unusedIndexes[this.unusedIndexes.length - 1];\r\n            --this.unusedIndexes.length;\r\n            this.innerMap.set(lastIndex, elem);\r\n            return lastIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtains the amount of elements inside the array.\r\n     * @returns Amount of elements inside the array.\r\n     */\r\n    public count(): number {\r\n        return this.innerMap.size;\r\n    }\r\n\r\n    /**\r\n     * Iterates over the array and applies a function.\r\n     * @param consumer Function to apply to any pair of index-element found (undefined values are discarted).\r\n     */\r\n    public foreach(consumer: (value: T, key: number) => void): void {\r\n        this.innerMap.forEach(function(value: T, key: number) {\r\n            consumer(value, key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains an element at the specified index.\r\n     * @param index Index of the element to obtaint.\r\n     * @returns Element obtianed at the specified index.\r\n     */\r\n    public get(index: number): T {\r\n        return this.innerMap.get(index);\r\n    }\r\n\r\n    /**\r\n     * Removes an element at the position specified.\r\n     * @param index Index of the element to be removed.\r\n     * @returns Result of the operation.\r\n     */\r\n    public remove(index: number): boolean {\r\n        if (this.innerMap.has(index)) {\r\n            this.innerMap.delete(index);\r\n            this.unusedIndexes[this.unusedIndexes.length] = index;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","require('core-js/fn/promise');\n\nimport {\n    SINGLE_SLIDE_CAROUSEL_ACTIONS,\n    SINGLE_SLIDE_CAROUSEL_EVENTS,\n    SINGLE_SLIDE_CAROUSEL_STYLES,\n    SingleSlideCarousel,\n } from './carousel/single-slide/single-slide-carousel';\n\nconst sora = function() {\n    return {\n        SingleSlideCarousel: SingleSlideCarousel,\n        actions: {\n            SINGLE_SLIDE_CAROUSEL_ACTIONS : SINGLE_SLIDE_CAROUSEL_ACTIONS,\n        },\n        events: {\n            SINGLE_SLIDE_CAROUSEL_EVENTS : SINGLE_SLIDE_CAROUSEL_EVENTS,\n        },\n        styles: {\n            SINGLE_SLIDE_CAROUSEL_STYLES : SINGLE_SLIDE_CAROUSEL_STYLES,\n        },\n    };\n} ();\n\nmodule.exports = sora;\n","/**\r\n * Constraint that determines the start of the task part.\r\n */\r\nexport interface ITaskPartWhenConstraint {\r\n    /**\r\n     * When entity to check once this constraint is ensured.\r\n     */\r\n    after: ITaskPartWhenConstraint;\r\n    /**\r\n     * Type of this constraint.\r\n     */\r\n    constraintType: string;\r\n}\r\n\r\n/**\r\n * Constraint that determines the start of the task part.\r\n */\r\nexport abstract class TaskPartWhenConstraint implements ITaskPartWhenConstraint {\r\n    /**\r\n     * When entity to check once this constraint is ensured.\r\n     */\r\n    public after: ITaskPartWhenConstraint;\r\n    /**\r\n     * Type of this constraint.\r\n     */\r\n    public constraintType: string;\r\n\r\n    /**\r\n     * Creates a new task part constraint.\r\n     * @param after Constraint to apply after this constraint is checked.\r\n     * @param constraintType Constraint type.\r\n     */\r\n    public constructor(after: ITaskPartWhenConstraint, constraintType: string) {\r\n        this.after = after;\r\n        this.constraintType = constraintType;\r\n    }\r\n}\r\n","import {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\n\r\n/**\r\n * Task constraint types\r\n */\r\nexport const TASK_CONSTRAINT_TYPES = {\r\n    /**\r\n     * Requires the end of a task part.\r\n     */\r\n    END: 'anim.end',\r\n    /**\r\n     * Requires a group of constraints.\r\n     */\r\n    GROUP: 'group',\r\n    /**\r\n     * Requires the start of a task part.\r\n     */\r\n    START : 'anim.start',\r\n    /**\r\n     * Requires an amount of time.\r\n     */\r\n    WAIT_FOR: 'wait',\r\n};\r\n\r\nexport abstract class TaskPartConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Alias of the part affected by this constraint.\r\n     */\r\n    public alias: string;\r\n\r\n    /**\r\n     * Creates a new task part constraint.\r\n     * @param after Constraint to apply after this constraint is checked.\r\n     * @param alias Aliases of the parts affected by this constraint.\r\n     * @param constraintType Constraint type.\r\n     */\r\n    public constructor(after: ITaskPartWhenConstraint, alias: string, constraintType: string) {\r\n        super(after, constraintType);\r\n\r\n        this.alias = alias;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { TokenMap } from '../../collection/token-map';\r\nimport { IOperationManagerAccess } from './operation-manager-access';\r\n\r\n/**\r\n * Operation arguments\r\n */\r\nexport interface IOperationArgs {\r\n    aliases: string[];\r\n}\r\n\r\n/**\r\n * Represents an operation manager. The operation is propagated using an event.\r\n * All the subscribers\r\n */\r\nexport class OperationManager<Args extends IOperationArgs> implements IOperationManagerAccess<Args> {\r\n\r\n    //#region Attributes\r\n\r\n    /**\r\n     * Function to be called to handle the event.\r\n     */\r\n    protected callFunction: (eventArgs: Args) => void;\r\n\r\n    /**\r\n     * Alias of the event.\r\n     */\r\n    protected eventAlias: string;\r\n\r\n    /**\r\n     * Event emmitter of the event.\r\n     */\r\n    protected eventEmitter: EventEmitter;\r\n\r\n    /**\r\n     * Object to storage all the functions subscribed.\r\n     */\r\n    protected subscriptionStorage: { [alias: string]: TokenMap<(eventArgs: Args) => void> };\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Creates a new operation manager\r\n     * @param eventAlias Event alias.\r\n     * @param eventEmitter Event emitter.\r\n     */\r\n    public constructor(eventAlias: string, eventEmitter: EventEmitter) {\r\n        const that = this;\r\n        this.callFunction = function(eventArgs: Args): void {\r\n            if (eventArgs.aliases == null) {\r\n                for (const alias in that.subscriptionStorage) {\r\n                    if (that.subscriptionStorage.hasOwnProperty(alias)) {\r\n                        const subscribers = that.subscriptionStorage[alias];\r\n                        if (subscribers != null) {\r\n                            subscribers.foreach(function(value: (eventArgs: Args) => void) {\r\n                                value(eventArgs);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (const alias of eventArgs.aliases) {\r\n                    const subscribers = that.subscriptionStorage[alias];\r\n                    if (subscribers != null) {\r\n                        subscribers.foreach(function(value: (eventArgs: Args) => void) {\r\n                            value(eventArgs);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.eventAlias = eventAlias;\r\n        this.eventEmitter = eventEmitter;\r\n        this.subscriptionStorage = {};\r\n\r\n        this.eventEmitter.addListener(this.eventAlias, this.callFunction);\r\n    }\r\n\r\n    /**\r\n     * Disposes the instance.\r\n     */\r\n    public dispose(): void {\r\n        this.eventEmitter.removeListener(this.eventAlias, this.callFunction);\r\n    }\r\n\r\n    /**\r\n     * Substribes a handler under an alias.\r\n     * @param alias Alias of the handler.\r\n     * @param handler Handler to be subscribed.\r\n     */\r\n    public subscribe(alias: string, handler: (eventArgs: Args) => void): number {\r\n        if (null == this.subscriptionStorage[alias]) {\r\n            this.subscriptionStorage[alias] = new TokenMap();\r\n        }\r\n        return this.subscriptionStorage[alias].add(handler);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes a handler under an alias.\r\n     * @param alias Alias of the handler.\r\n     * @param index Index of the handler.\r\n     */\r\n    public unsubscribe(alias: string, index: number): boolean {\r\n        if (null == this.subscriptionStorage[alias]) {\r\n            return false;\r\n        } else {\r\n            return this.subscriptionStorage[alias].remove(index);\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { ITaskFlow } from './flow/task-flow';\r\nimport { ITaskFlowPart } from './flow/task-flow-part';\r\nimport {\r\n    ITaskFlowPartEndArgs,\r\n    ITaskFlowPartStartArgs,\r\n} from './flow/task-flow-part-event-args';\r\nimport { ITaskPartWhenConstraint } from './flow/task-flow-when';\r\nimport { TaskPartBeginConstraint } from './flow/task-part-begin-constraint';\r\nimport { TASK_CONSTRAINT_TYPES } from './flow/task-part-constraint';\r\nimport { TaskPartEndConstraint } from './flow/task-part-end-constraint';\r\nimport { TaskGroupConstraint } from './flow/task-part-group-constraint';\r\nimport { TaskTimeConstraint } from './flow/task-part-time-constraint';\r\nimport { OperationManager } from './operation/operation-manager';\r\nimport { IOperationManagerAccess } from './operation/operation-manager-access';\r\nimport { TASK_PART_WHEN_EVENTS } from './task-part-when-events';\r\nimport { TaskPartWhenOperator } from './task-part-when-operator';\r\n\r\n/**\r\n * Represents a task engine.\r\n */\r\nexport abstract class TaskEngine<TPart extends ITaskFlowPart> {\r\n    //#region Attributes\r\n\r\n    /**\r\n     * Task currently managed.\r\n     */\r\n    protected currentTask: ITaskFlow<TPart>;\r\n\r\n    /**\r\n     * Event emitter to use\r\n     */\r\n    protected eventEmitter: EventEmitter;\r\n\r\n    //#region Operations\r\n\r\n    /**\r\n     * Manager that handles the part end event.\r\n     */\r\n    protected partEndManager: OperationManager<ITaskFlowPartEndArgs<TPart>>;\r\n\r\n    /**\r\n     * Manager that handles the part start event.\r\n     */\r\n    protected partStartManager: OperationManager<ITaskFlowPartStartArgs<TPart>>;\r\n\r\n    //#endregion\r\n\r\n    //#endregion\r\n\r\n    //#region Public\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     */\r\n    public constructor() {\r\n        this.eventEmitter = new EventEmitter();\r\n\r\n        this.partEndManager = new OperationManager<ITaskFlowPartEndArgs<TPart>>(\r\n            TASK_PART_WHEN_EVENTS.END,\r\n            this.eventEmitter,\r\n        );\r\n        this.partStartManager = new OperationManager<ITaskFlowPartStartArgs<TPart>>(\r\n            TASK_PART_WHEN_EVENTS.START,\r\n            this.eventEmitter,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Obtains the access of the part end event.\r\n     * @returns Access of the part end event.\r\n     */\r\n    public getPartEndListenerAccess(): IOperationManagerAccess<ITaskFlowPartEndArgs<TPart>> {\r\n        const that = this;\r\n        return {\r\n            subscribe: function(\r\n                alias: string,\r\n                handler: (eventArgs: ITaskFlowPartEndArgs<TPart>) => void,\r\n            ): number {\r\n                return that.partEndManager.subscribe(alias, handler);\r\n            },\r\n            unsubscribe: function(alias: string, index: number): boolean {\r\n                return that.partEndManager.unsubscribe(alias, index);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Obtains the access of the part start event.\r\n     * @returns Access of the part start event.\r\n     */\r\n    public getPartStartListenerAccess(): IOperationManagerAccess<ITaskFlowPartStartArgs<TPart>> {\r\n        const that = this;\r\n        return {\r\n            subscribe: function(\r\n                alias: string,\r\n                handler: (eventArgs: ITaskFlowPartStartArgs<TPart>) => void,\r\n            ): number {\r\n                return that.partStartManager.subscribe(alias, handler);\r\n            },\r\n            unsubscribe: function(alias: string, index: number): boolean {\r\n                return that.partStartManager.unsubscribe(alias, index);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a task flow.\r\n     * @param taskFlow Task flow to be managed.\r\n     * @returns Task part promises.\r\n     */\r\n    public handle(taskFlow: ITaskFlow<TPart>): Array<Promise<void>> {\r\n        if (taskFlow == null) {\r\n            throw new Error('It\\'s required a task flow.');\r\n        }\r\n        if (taskFlow.parts == null) {\r\n            throw new Error('It\\'s required a task flow with parts.');\r\n        }\r\n\r\n        this.currentTask = taskFlow;\r\n        const partPromises: Array<Promise<void>> = new Array(taskFlow.parts.length);\r\n\r\n        for (var i = 0; i < taskFlow.parts.length; ++i) {\r\n            partPromises[i] = this.handleTaskPart(taskFlow.parts[i]);\r\n        }\r\n\r\n        return partPromises;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Handles a task part.\r\n     *\r\n     * @param part Task part to handle.\r\n     *\r\n     * @returns Promise resolved once the part of the task is finished.\r\n     */\r\n    protected handleTaskPart(part: TPart): Promise<void> {\r\n        const that = this;\r\n\r\n        return new Promise<void>(function(resolve, reject) {\r\n            that.handleTaskPartWhen(part.when).then(function() {\r\n                // 1. Emit the start of task part.\r\n                that.eventEmitter.emit(\r\n                    TASK_PART_WHEN_EVENTS.START,\r\n                    {\r\n                        aliases: [part.alias],\r\n                        part: part,\r\n                    } as ITaskFlowPartStartArgs<TPart>,\r\n                );\r\n\r\n                const promise: PromiseLike<{} | void> = that.performTask(part);\r\n\r\n                promise.then(function() {\r\n                    // 3. Emit the end of the task part and resolve the promise.\r\n                    that.eventEmitter.emit(\r\n                        TASK_PART_WHEN_EVENTS.END,\r\n                        {\r\n                            aliases: [part.alias],\r\n                            part: part,\r\n                        } as ITaskFlowPartEndArgs<TPart>,\r\n                    );\r\n                    resolve();\r\n                });\r\n            }).catch(function(err: any) {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs a task part.\r\n     * @param part Task part to be performed.\r\n     * @returns Promise resolved once the part task is performed.\r\n     */\r\n    protected abstract performTask(part: TPart): PromiseLike<{} | void>;\r\n\r\n    //#region TaskPartWhenconstraint\r\n\r\n    /**\r\n     * Handles the when entity of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhen(whenEntity: ITaskPartWhenConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            if (null == whenEntity) {\r\n                resolve();\r\n            } else {\r\n                switch (whenEntity.constraintType) {\r\n                    case TASK_CONSTRAINT_TYPES.START:\r\n                        that.handleTaskPartWhenPartBegins(whenEntity as TaskPartBeginConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.END:\r\n                        that.handleTaskPartWhenPartEnds(whenEntity as TaskPartEndConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.GROUP:\r\n                        that.handleTaskPartWhenPartGroup(whenEntity as TaskGroupConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.WAIT_FOR:\r\n                        that.handleTaskPartWhenWaitFor(whenEntity as TaskTimeConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unexpected when entity type.');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskPartBeginConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartBegins(whenEntity: TaskPartBeginConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const eventHandler = function() {\r\n                that.partStartManager.unsubscribe(whenEntity.alias, token);\r\n                if (null == whenEntity.after) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            };\r\n            const token: number = that.partStartManager.subscribe(whenEntity.alias, eventHandler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskPartEndConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartEnds(whenEntity: TaskPartEndConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const eventHandler = function() {\r\n                that.partEndManager.unsubscribe(whenEntity.alias, token);\r\n                if (null == whenEntity.after) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            };\r\n            const token: number = that.partEndManager.subscribe(whenEntity.alias, eventHandler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskGroupConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartGroup(whenEntity: TaskGroupConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const childPromises: Array<Promise<void>> = new Array(whenEntity.constraints.length);\r\n\r\n            for (var i = 0; i < whenEntity.constraints.length; ++i) {\r\n                childPromises[i] = new Promise<void>(function(resolve, reject) {\r\n                    that.handleTaskPartWhen(whenEntity.constraints[i])\r\n                        .then(resolve);\r\n                });\r\n            }\r\n\r\n            if (TaskPartWhenOperator.AND === whenEntity.operator) {\r\n                Promise.all(childPromises)\r\n                    .then(function() {\r\n                        resolve();\r\n                    });\r\n            } else if (TaskPartWhenOperator.OR === whenEntity.operator) {\r\n                Promise.race(childPromises)\r\n                .then(function() {\r\n                    resolve();\r\n                });\r\n            } else {\r\n                reject('Unexpected operator.');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskTimeConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenWaitFor(whenEntity: TaskTimeConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            setTimeout(function() {\r\n                if (whenEntity.after == null) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            }, whenEntity.millis);\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","/**\r\n * Prefixes used to ganerate alias for events over task parts.\r\n */\r\nexport const TASK_PART_WHEN_EVENTS = {\r\n    /**\r\n     * Prefix for any event raised once a task part is ended.\r\n     */\r\n    END: 'part.end',\r\n    /**\r\n     * Prefix for any event raised once a task part is started.\r\n     */\r\n    START: 'part.start',\r\n};\r\n","/**\r\n * Logical operator to apply.\r\n */\r\nexport enum TaskPartWhenOperator {\r\n    /**\r\n     * And operator.\r\n     */\r\n    AND,\r\n    /**\r\n     * Or operator.\r\n     */\r\n    OR,\r\n}\r\n","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nrequire('../modules/es7.promise.finally');\nrequire('../modules/es7.promise.try');\nmodule.exports = require('../modules/_core').Promise;\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var core = module.exports = { version: '2.6.0' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = false;\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}