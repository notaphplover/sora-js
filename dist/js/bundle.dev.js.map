{"version":3,"sources":["dist/js/node_modules/browser-pack/_prelude.js","dist/js/dist/js/tmp/src/carousel/animation/animation-play-state.js","dist/js/dist/js/tmp/src/carousel/carousel-base.js","dist/js/dist/js/tmp/src/carousel/single-slide/single-slide-carousel.js","dist/js/dist/js/tmp/src/collection/cancelable-collection-change-args.js","dist/js/dist/js/tmp/src/collection/collection-change-args.js","dist/js/dist/js/tmp/src/collection/collection-manager.js","dist/js/dist/js/tmp/src/collection/html-children-manager.js","dist/js/dist/js/tmp/src/collection/token-map.js","dist/js/dist/js/tmp/src/main.js","dist/js/dist/js/tmp/src/task/animation-engine.js","dist/js/dist/js/tmp/src/task/flow/task-flow-when.js","dist/js/dist/js/tmp/src/task/flow/task-part-constraint.js","dist/js/dist/js/tmp/src/task/operation-manager.js","dist/js/dist/js/tmp/src/task/task-engine.js","dist/js/node_modules/babel-runtime/core-js/get-iterator.js","dist/js/node_modules/babel-runtime/core-js/map.js","dist/js/node_modules/babel-runtime/core-js/object/assign.js","dist/js/node_modules/babel-runtime/core-js/object/create.js","dist/js/node_modules/babel-runtime/core-js/object/define-property.js","dist/js/node_modules/babel-runtime/core-js/object/get-own-property-descriptor.js","dist/js/node_modules/babel-runtime/core-js/object/get-prototype-of.js","dist/js/node_modules/babel-runtime/core-js/object/set-prototype-of.js","dist/js/node_modules/babel-runtime/core-js/promise.js","dist/js/node_modules/babel-runtime/core-js/symbol.js","dist/js/node_modules/babel-runtime/core-js/symbol/iterator.js","dist/js/node_modules/babel-runtime/helpers/classCallCheck.js","dist/js/node_modules/babel-runtime/helpers/createClass.js","dist/js/node_modules/babel-runtime/helpers/get.js","dist/js/node_modules/babel-runtime/helpers/inherits.js","dist/js/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","dist/js/node_modules/babel-runtime/helpers/typeof.js","dist/js/node_modules/core-js/fn/promise.js","dist/js/node_modules/core-js/library/fn/get-iterator.js","dist/js/node_modules/core-js/library/fn/map.js","dist/js/node_modules/core-js/library/fn/object/assign.js","dist/js/node_modules/core-js/library/fn/object/create.js","dist/js/node_modules/core-js/library/fn/object/define-property.js","dist/js/node_modules/core-js/library/fn/object/get-own-property-descriptor.js","dist/js/node_modules/core-js/library/fn/object/get-prototype-of.js","dist/js/node_modules/core-js/library/fn/object/set-prototype-of.js","dist/js/node_modules/core-js/library/fn/symbol/index.js","dist/js/node_modules/core-js/library/fn/symbol/iterator.js","dist/js/node_modules/core-js/library/modules/_a-function.js","dist/js/node_modules/core-js/library/modules/_add-to-unscopables.js","dist/js/node_modules/core-js/library/modules/_an-instance.js","dist/js/node_modules/core-js/library/modules/_an-object.js","dist/js/node_modules/core-js/library/modules/_array-from-iterable.js","dist/js/node_modules/core-js/library/modules/_array-includes.js","dist/js/node_modules/core-js/library/modules/_array-methods.js","dist/js/node_modules/core-js/library/modules/_array-species-constructor.js","dist/js/node_modules/core-js/library/modules/_array-species-create.js","dist/js/node_modules/core-js/library/modules/_classof.js","dist/js/node_modules/core-js/library/modules/_cof.js","dist/js/node_modules/core-js/library/modules/_collection-strong.js","dist/js/node_modules/core-js/library/modules/_collection-to-json.js","dist/js/node_modules/core-js/library/modules/_collection.js","dist/js/node_modules/core-js/library/modules/_core.js","dist/js/node_modules/core-js/library/modules/_ctx.js","dist/js/node_modules/core-js/library/modules/_defined.js","dist/js/node_modules/core-js/library/modules/_descriptors.js","dist/js/node_modules/core-js/library/modules/_dom-create.js","dist/js/node_modules/core-js/library/modules/_enum-bug-keys.js","dist/js/node_modules/core-js/library/modules/_enum-keys.js","dist/js/node_modules/core-js/library/modules/_export.js","dist/js/node_modules/core-js/library/modules/_fails.js","dist/js/node_modules/core-js/library/modules/_for-of.js","dist/js/node_modules/core-js/library/modules/_global.js","dist/js/node_modules/core-js/library/modules/_has.js","dist/js/node_modules/core-js/library/modules/_hide.js","dist/js/node_modules/core-js/library/modules/_html.js","dist/js/node_modules/core-js/library/modules/_ie8-dom-define.js","dist/js/node_modules/core-js/library/modules/_invoke.js","dist/js/node_modules/core-js/library/modules/_iobject.js","dist/js/node_modules/core-js/library/modules/_is-array-iter.js","dist/js/node_modules/core-js/library/modules/_is-array.js","dist/js/node_modules/core-js/library/modules/_is-object.js","dist/js/node_modules/core-js/library/modules/_iter-call.js","dist/js/node_modules/core-js/library/modules/_iter-create.js","dist/js/node_modules/core-js/library/modules/_iter-define.js","dist/js/node_modules/core-js/library/modules/_iter-detect.js","dist/js/node_modules/core-js/library/modules/_iter-step.js","dist/js/node_modules/core-js/library/modules/_iterators.js","dist/js/node_modules/core-js/library/modules/_library.js","dist/js/node_modules/core-js/library/modules/_meta.js","dist/js/node_modules/core-js/library/modules/_microtask.js","dist/js/node_modules/core-js/library/modules/_new-promise-capability.js","dist/js/node_modules/core-js/library/modules/_object-assign.js","dist/js/node_modules/core-js/library/modules/_object-create.js","dist/js/node_modules/core-js/library/modules/_object-dp.js","dist/js/node_modules/core-js/library/modules/_object-dps.js","dist/js/node_modules/core-js/library/modules/_object-gopd.js","dist/js/node_modules/core-js/library/modules/_object-gopn-ext.js","dist/js/node_modules/core-js/library/modules/_object-gopn.js","dist/js/node_modules/core-js/library/modules/_object-gops.js","dist/js/node_modules/core-js/library/modules/_object-gpo.js","dist/js/node_modules/core-js/library/modules/_object-keys-internal.js","dist/js/node_modules/core-js/library/modules/_object-keys.js","dist/js/node_modules/core-js/library/modules/_object-pie.js","dist/js/node_modules/core-js/library/modules/_object-sap.js","dist/js/node_modules/core-js/library/modules/_perform.js","dist/js/node_modules/core-js/library/modules/_promise-resolve.js","dist/js/node_modules/core-js/library/modules/_property-desc.js","dist/js/node_modules/core-js/library/modules/_redefine-all.js","dist/js/node_modules/core-js/library/modules/_redefine.js","dist/js/node_modules/core-js/library/modules/_set-collection-from.js","dist/js/node_modules/core-js/library/modules/_set-collection-of.js","dist/js/node_modules/core-js/library/modules/_set-proto.js","dist/js/node_modules/core-js/library/modules/_set-species.js","dist/js/node_modules/core-js/library/modules/_set-to-string-tag.js","dist/js/node_modules/core-js/library/modules/_shared-key.js","dist/js/node_modules/core-js/library/modules/_shared.js","dist/js/node_modules/core-js/library/modules/_species-constructor.js","dist/js/node_modules/core-js/library/modules/_string-at.js","dist/js/node_modules/core-js/library/modules/_task.js","dist/js/node_modules/core-js/library/modules/_to-absolute-index.js","dist/js/node_modules/core-js/library/modules/_to-integer.js","dist/js/node_modules/core-js/library/modules/_to-iobject.js","dist/js/node_modules/core-js/library/modules/_to-length.js","dist/js/node_modules/core-js/library/modules/_to-object.js","dist/js/node_modules/core-js/library/modules/_to-primitive.js","dist/js/node_modules/core-js/library/modules/_uid.js","dist/js/node_modules/core-js/library/modules/_user-agent.js","dist/js/node_modules/core-js/library/modules/_validate-collection.js","dist/js/node_modules/core-js/library/modules/_wks-define.js","dist/js/node_modules/core-js/library/modules/_wks-ext.js","dist/js/node_modules/core-js/library/modules/_wks.js","dist/js/node_modules/core-js/library/modules/core.get-iterator-method.js","dist/js/node_modules/core-js/library/modules/core.get-iterator.js","dist/js/node_modules/core-js/library/modules/es6.array.iterator.js","dist/js/node_modules/core-js/library/modules/es6.map.js","dist/js/node_modules/core-js/library/modules/es6.object.assign.js","dist/js/node_modules/core-js/library/modules/es6.object.create.js","dist/js/node_modules/core-js/library/modules/es6.object.define-property.js","dist/js/node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js","dist/js/node_modules/core-js/library/modules/es6.object.get-prototype-of.js","dist/js/node_modules/core-js/library/modules/es6.object.set-prototype-of.js","dist/js/node_modules/core-js/library/modules/es6.object.to-string.js","dist/js/node_modules/core-js/library/modules/es6.promise.js","dist/js/node_modules/core-js/library/modules/es6.string.iterator.js","dist/js/node_modules/core-js/library/modules/es6.symbol.js","dist/js/node_modules/core-js/library/modules/es7.map.from.js","dist/js/node_modules/core-js/library/modules/es7.map.of.js","dist/js/node_modules/core-js/library/modules/es7.map.to-json.js","dist/js/node_modules/core-js/library/modules/es7.promise.finally.js","dist/js/node_modules/core-js/library/modules/es7.promise.try.js","dist/js/node_modules/core-js/library/modules/es7.symbol.async-iterator.js","dist/js/node_modules/core-js/library/modules/es7.symbol.observable.js","dist/js/node_modules/core-js/library/modules/web.dom.iterable.js","dist/js/node_modules/core-js/modules/_add-to-unscopables.js","dist/js/node_modules/core-js/modules/_export.js","dist/js/node_modules/core-js/modules/_library.js","dist/js/node_modules/core-js/modules/_redefine-all.js","dist/js/node_modules/core-js/modules/_redefine.js","dist/js/node_modules/core-js/modules/_set-species.js","dist/js/node_modules/core-js/modules/es6.object.to-string.js","dist/js/node_modules/core-js/modules/web.dom.iterable.js","dist/js/node_modules/events/events.js"],"names":[],"mappings":"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B,CAAvB,CAAxB,EACK,IADL,CACU,OADV;AAEH,qBAHkB,CAAnB;AAIH;AACD,oBAAI,qBAAqB,GAArB,KAA6B,WAAW,QAA5C,EAAsD;AAClD,sCAAQ,GAAR,CAAY,aAAZ,EACK,IADL,CACU,YAAY;AAClB;AACH,qBAHD;AAIH,iBALD,MAMK,IAAI,qBAAqB,EAArB,KAA4B,WAAW,QAA3C,EAAqD;AACtD,sCAAQ,IAAR,CAAa,aAAb,EACK,IADL,CACU,YAAY;AAClB;AACH,qBAHD;AAIH,iBALI,MAMA;AACD,2BAAO,sBAAP;AACH;AACJ,aAvBM,CAAP;AAwBH;;;kDACyB,U,EAAY;AAClC,gBAAM,OAAO,IAAb;AACA,mBAAO,sBAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,2BAAW,YAAY;AACnB,wBAAI,WAAW,KAAX,IAAoB,IAAxB,EAA8B;AAC1B;AACH,qBAFD,MAGK;AACD,6BAAK,kBAAL,CAAwB,WAAW,KAAnC,EACK,IADL,CACU,OADV;AAEH;AACJ,iBARD,EAQG,WAAW,MARd;AASH,aAVM,CAAP;AAWH;;;;;AAGL;;;ACvJA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbfile":"bundle.dev.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export var AnimationPlayStateValue;\n(function (AnimationPlayStateValue) {\n    AnimationPlayStateValue[AnimationPlayStateValue[\"paused\"] = 0] = \"paused\";\n    AnimationPlayStateValue[AnimationPlayStateValue[\"running\"] = 1] = \"running\";\n})(AnimationPlayStateValue || (AnimationPlayStateValue = {}));\n\n//# sourceMappingURL=animation-play-state.js.map\n","export const CAROUSEL_STYLES = {\n    ANIMATION_PAUSED: 'sora-animation-paused',\n    CAROUSEL: 'sora-carousel',\n    CLEAR_ANIMATION: 'sora-clear-animations',\n    SLIDE: 'sora-slide',\n    WRAPPER: 'sora-wrapper',\n};\nexport class CarouselBase {\n}\n\n//# sourceMappingURL=carousel-base.js.map\n","import { EventEmitter } from 'events';\nimport { COLLECTION_MANAGER_EVENTS, } from '../../collection/collection-manager';\nimport { HtmlChildrenManager } from '../../collection/html-children-manager';\nimport { SingleAnimationEngine, } from '../../task/animation-engine';\nimport { AnimationPlayStateValue } from '../animation/animation-play-state';\nimport { CAROUSEL_STYLES, CarouselBase, } from '../carousel-base';\nexport const SINGLE_SLIDE_CAROUSEL_ACTIONS = {\n    GO_TO: 'to',\n    GO_TO_NEXT: 'next',\n    GO_TO_PREVIOUS: 'prev',\n};\nexport const SINGLE_SLIDE_CAROUSEL_EVENTS = {\n    ON_ANIMATION_END: 'car.anim.out',\n    ON_ANIMATION_PLAY_STATE_CHANGE: 'car.anim.state.ch',\n    ON_ANIMATION_START: 'car.anim.in',\n    ON_CANCEL_ANIMATION: 'car.anim.cancel',\n    ON_SLIDE_ENTER: 'car.sl.in',\n    ON_SLIDE_LEAVE: 'car.sl.out',\n};\nconst SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES = {\n    ENTER: 'enter-part',\n    LEAVE: 'leave-part',\n};\nexport const SINGLE_SLIDE_CAROUSEL_STYLES = {\n    SLIDE_HIDDEN: 'sora-hidden',\n    SORA_RELATIVE: 'sora-relative',\n};\nexport class SingleSlideCarousel extends CarouselBase {\n    constructor(element, options) {\n        super();\n        if (element == null) {\n            throw new Error('The element must not be null.');\n        }\n        if (!element.classList.contains(CAROUSEL_STYLES.CAROUSEL)) {\n            throw new Error('The carousel element must contain the class \"' + CAROUSEL_STYLES.CAROUSEL + '\".');\n        }\n        const soraWrapper = element.querySelector('.' + CAROUSEL_STYLES.WRAPPER);\n        if (soraWrapper == null) {\n            throw new Error('The element has no child with class \\'sora-wrapper\\'.');\n        }\n        const children = new Array();\n        for (var i = 0; i < soraWrapper.children.length; ++i) {\n            if (soraWrapper.children[i].classList.contains(CAROUSEL_STYLES.SLIDE)) {\n                children.push(soraWrapper.children[i]);\n            }\n        }\n        this.activeIndex = options.index || 0;\n        this.currentAnimation = null;\n        this.eventEmitter = new EventEmitter();\n        this.elementsManager = new HtmlChildrenManager(children, this.eventEmitter, soraWrapper);\n        if (this.activeIndex < 0 || this.activeIndex >= this.elementsManager.getLength()) {\n            throw new Error('Invalid options.index. There is no element with index ' + options.index + '.');\n        }\n        for (var i = 0; i < children.length; ++i) {\n            if (i === this.activeIndex) {\n                children[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n            }\n            else {\n                children[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            }\n        }\n        const that = this;\n        const onBeforeChange = function (eventArgs) {\n            const indexMap = eventArgs.getIndexMap();\n            if (null == indexMap[that.activeIndex]) {\n                eventArgs.setPreventDefault();\n            }\n        };\n        const onAfterChange = function (eventArgs) {\n            if (!eventArgs.getPreventDefault()) {\n                const indexMap = eventArgs.getIndexMap();\n                that.activeIndex = indexMap[that.activeIndex];\n            }\n        };\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n        this.engineAnimation = new SingleAnimationEngine();\n    }\n    addListener(event, listener) {\n        this.eventEmitter.addListener(event, listener);\n    }\n    createWaitPromise(options) {\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            var lastTimeRun;\n            var timeToWait = options.millis;\n            if (that.paused) {\n                lastTimeRun = null;\n            }\n            else {\n                var waitInterval = setInterval(function () {\n                    removeListeners();\n                    resolve();\n                }, timeToWait);\n                lastTimeRun = new Date().getTime();\n            }\n            var onCancelAnimation = null;\n            if (options.stopOnCancelAnimation) {\n                onCancelAnimation = function () {\n                    removeListeners();\n                    resolve();\n                };\n                that.addListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, onCancelAnimation);\n            }\n            const onPlayStateChange = function (args) {\n                if (AnimationPlayStateValue.paused === args.value) {\n                    timeToWait = timeToWait - (new Date().getTime() - lastTimeRun);\n                    clearInterval(waitInterval);\n                }\n                else if (AnimationPlayStateValue.running === args.value) {\n                    lastTimeRun = new Date().getTime();\n                    if (0 < timeToWait) {\n                        waitInterval = setInterval(function () {\n                            that.removeListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n                            if (null != onCancelAnimation) {\n                                that.removeListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, onCancelAnimation);\n                            }\n                            resolve();\n                        }, timeToWait);\n                    }\n                    else {\n                        removeListeners();\n                        resolve();\n                    }\n                }\n            };\n            const removeListeners = function () {\n                that.removeListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n                if (null != onCancelAnimation) {\n                    that.removeListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, onCancelAnimation);\n                }\n            };\n            that.addListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n        });\n    }\n    forceActiveSlide(activeIndex) {\n        const eventArgs = { activeIndex: activeIndex };\n        this.engineAnimation.cancelAnimation(null);\n        this.paused = false;\n        this.activeIndex = activeIndex;\n        this.resetCarouselStructure(activeIndex);\n        this.eventEmitter.emit(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, eventArgs);\n    }\n    getActiveElement() {\n        return this.elementsManager.getCollection()[this.activeIndex];\n    }\n    getActiveIndex() {\n        return this.activeIndex;\n    }\n    getElementsManager() {\n        return this.elementsManager;\n    }\n    hasActiveAnimation() {\n        return null != this.currentAnimation;\n    }\n    handle(action, options) {\n        switch (action) {\n            case SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO:\n                if (options == null || typeof options.index !== 'number') {\n                    throw new Error('Invalid options for \\'' + SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO + '\\'.');\n                }\n                return this.handleGoTo(options);\n            case SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_NEXT:\n                options.index = (this.activeIndex + 1) % this.elementsManager.getLength();\n                return this.handle(SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO, options);\n            case SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_PREVIOUS:\n                const elementsLength = this.elementsManager.getLength();\n                options.index = ((this.activeIndex - 1) % elementsLength + elementsLength) % elementsLength;\n                return this.handle(SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO, options);\n        }\n    }\n    isPaused() {\n        return this.paused;\n    }\n    pause() {\n        if (!this.paused) {\n            this.engineAnimation.pause(null);\n            this.paused = true;\n            this.eventEmitter.emit(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, { value: AnimationPlayStateValue.paused });\n        }\n    }\n    removeListener(event, listener) {\n        this.eventEmitter.removeListener(event, listener);\n    }\n    resume() {\n        if (this.paused) {\n            this.engineAnimation.resume(null);\n            this.paused = false;\n            this.eventEmitter.emit(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, { value: AnimationPlayStateValue.running });\n        }\n    }\n    generateGoToAnimationFlow(enterElement, leaveElement, options) {\n        const innerParts = [\n            {\n                alias: SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.ENTER,\n                elements: [enterElement],\n                styles: options.enterAnimation.slideStyles,\n                when: null,\n            },\n            {\n                alias: SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.LEAVE,\n                elements: [leaveElement],\n                styles: options.leaveAnimation.slideStyles,\n                when: null,\n            },\n        ];\n        const generateChildrenParts = function (parentElement, childrenStyles, aliasBase) {\n            if (childrenStyles) {\n                for (var i = 0; i < childrenStyles.length; ++i) {\n                    innerParts.push({\n                        alias: aliasBase + i.toString(),\n                        elements: function () {\n                            const elements = new Array();\n                            const animationObject = childrenStyles[i];\n                            const childrenElements = parentElement.querySelectorAll(animationObject.selector);\n                            for (const childrenElement of childrenElements) {\n                                elements.push(childrenElement);\n                            }\n                            return elements;\n                        }(),\n                        styles: childrenStyles[i].styles,\n                        when: null,\n                    });\n                }\n            }\n        };\n        generateChildrenParts(enterElement, options.enterAnimation.childrenStyles, SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.ENTER);\n        generateChildrenParts(leaveElement, options.leaveAnimation.childrenStyles, SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.LEAVE);\n        const innerPartsMap = {};\n        for (const innerPart of innerParts) {\n            innerPartsMap[innerPart.alias] = innerPart;\n        }\n        const innerGetPartByAlias = function (alias) {\n            return innerPartsMap[alias];\n        };\n        const animationFlow = {\n            getPartByAlias: innerGetPartByAlias,\n            parts: innerParts,\n        };\n        return animationFlow;\n    }\n    resetCarouselStructure(activeIndex) {\n        const collection = this.elementsManager.getCollection();\n        for (var i = 0; i < collection.length; ++i) {\n            while (collection[i].classList.length > 0) {\n                collection[i].classList.remove(collection[i].classList.item(0));\n            }\n            collection[i].classList.add(CAROUSEL_STYLES.SLIDE);\n            if (i === activeIndex) {\n                collection[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n            }\n            else {\n                collection[i].classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            }\n        }\n    }\n    handleGoTo(options) {\n        if (options.index < 0 || options.index >= this.elementsManager.getLength()) {\n            throw new Error('Invalid index. There is no element with index ' + options.index + '.');\n        }\n        if (options.index === this.activeIndex) {\n            throw new Error('Invalid index. It\\'s not allowed to go to the current active slide');\n        }\n        if (null == this.currentAnimation) {\n            this.currentAnimation = options;\n        }\n        else {\n            throw new Error('It\\'s not allowed to start an animation while an existing animation over an slide element is active');\n        }\n        const oldActiveElement = this.elementsManager.getCollection()[this.activeIndex];\n        var newActiveIndex = options.index;\n        this.eventEmitter.emit(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_START, {\n            options: options,\n        });\n        const that = this;\n        const onBeforeChange = function (eventArgs) {\n            const indexMap = eventArgs.getIndexMap();\n            if (null == indexMap[newActiveIndex]) {\n                eventArgs.setPreventDefault();\n            }\n        };\n        const onAfterChange = function (eventArgs) {\n            if (!eventArgs.getPreventDefault()) {\n                const indexMap = eventArgs.getIndexMap();\n                newActiveIndex = indexMap[newActiveIndex];\n            }\n        };\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n        this.addListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n        const newActiveElement = this.elementsManager.getCollection()[newActiveIndex];\n        newActiveElement.classList.remove(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n        var animationCanceled = false;\n        const cancelAnimationHandler = function () {\n            animationCanceled = true;\n            that.currentAnimation = null;\n        };\n        const animationFlow = this.generateGoToAnimationFlow(newActiveElement, oldActiveElement, options);\n        const animationPromises = this.engineAnimation.handle(animationFlow);\n        const ANIMATION_ENTER_INDEX = 0;\n        const ANIMATION_LEAVE_INDEX = 1;\n        const hideLeaveSlideAfterAnimationEnds = new Promise(function (resolve, reject) {\n            animationPromises[ANIMATION_LEAVE_INDEX].then(function (animationOptions) {\n                if (!animationCanceled) {\n                    oldActiveElement.classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                    oldActiveElement.classList.remove(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n                    newActiveElement.classList.add(SINGLE_SLIDE_CAROUSEL_STYLES.SORA_RELATIVE);\n                }\n                resolve();\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n        this.addListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, cancelAnimationHandler);\n        const soraHandlerStatus = new Promise(function (resolve, reject) {\n            Promise.all([\n                animationPromises[ANIMATION_ENTER_INDEX],\n                hideLeaveSlideAfterAnimationEnds,\n            ]).then(function () {\n                if (!animationCanceled) {\n                    that.activeIndex = newActiveIndex;\n                    that.currentAnimation = null;\n                }\n                that.removeListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n                that.removeListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n                that.removeListener(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, cancelAnimationHandler);\n                that.eventEmitter.emit(SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_END, {});\n                resolve();\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n        return {\n            animationPromises: animationPromises,\n            soraHandlerStatus: soraHandlerStatus,\n        };\n    }\n}\n\n//# sourceMappingURL=single-slide-carousel.js.map\n","import { CollectionChangeEventArgs } from './collection-change-args';\nexport class CancelableCollectionChangeEventArgs extends CollectionChangeEventArgs {\n    constructor(indexMap, newElements) {\n        super(indexMap, newElements, false);\n    }\n    setPreventDefault() {\n        this.preventDefault = true;\n    }\n}\n\n//# sourceMappingURL=cancelable-collection-change-args.js.map\n","export class CollectionChangeEventArgs {\n    constructor(indexMap, newElements, preventDefault) {\n        this.indexMap = indexMap;\n        this.newElements = newElements;\n        this.preventDefault = preventDefault;\n    }\n    getIndexMap() {\n        return Object.assign({}, this.indexMap);\n    }\n    getNewElements() {\n        return Object.assign({}, this.newElements);\n    }\n    getPreventDefault() {\n        return this.preventDefault;\n    }\n}\n\n//# sourceMappingURL=collection-change-args.js.map\n","import { CancelableCollectionChangeEventArgs } from './cancelable-collection-change-args';\nimport { CollectionChangeEventArgs } from './collection-change-args';\nexport const COLLECTION_MANAGER_EVENTS = {\n    collectionAfterChange: 'coll.ch.a',\n    collectionBeforeChange: 'coll.ch.b',\n};\nexport class CollectionManager {\n    constructor(collection, eventEmitter) {\n        this.collection = collection;\n        this.eventEmitter = eventEmitter;\n    }\n    getCollection() {\n        return this.collection;\n    }\n    getLength() {\n        return this.collection.length;\n    }\n    insertElements(elements) {\n        this.internalInsertElements(elements);\n    }\n    removeElements(indexes) {\n        this.internalRemoveElements(indexes);\n    }\n    internalInsertElements(elements) {\n        var keys = new Array();\n        for (const elemIndex in elements) {\n            if (elements.hasOwnProperty(elemIndex)) {\n                const numberElemIndex = Number(elemIndex);\n                if (numberElemIndex < 0) {\n                    throw new Error('The index param should be greater or equals zero.');\n                }\n                if (numberElemIndex > this.collection.length) {\n                    throw new Error('The index param should be less or equals the number of elements of the collection.');\n                }\n                keys.push(numberElemIndex);\n            }\n        }\n        keys = keys.sort(function (number1, number2) {\n            return number1 - number2;\n        });\n        if (0 === keys.length) {\n            return;\n        }\n        const newElements = new Array(this.collection.length + keys.length);\n        const indexMap = {};\n        if (1 === keys.length) {\n            const index = keys[0];\n            const element = elements[index];\n            for (var i = 0; i < index; ++i) {\n                newElements[i] = this.collection[i];\n                indexMap[i] = i;\n            }\n            newElements[index] = element;\n            for (var i = index + 1; i < newElements.length; ++i) {\n                newElements[i] = this.collection[i - 1];\n                indexMap[i - 1] = i;\n            }\n        }\n        else {\n            for (var i = 0; i < keys[0]; ++i) {\n                newElements[i] = this.collection[i];\n                indexMap[i] = i;\n            }\n            newElements[keys[0]] = elements[keys[0]];\n            for (var i = 1; i < keys.length; ++i) {\n                const indexPrevious = keys[i - 1];\n                const index = keys[i];\n                for (var j = indexPrevious + 1; j < index; ++j) {\n                    newElements[j] = this.collection[j - i];\n                    indexMap[j - i] = j;\n                }\n                newElements[index] = elements[index];\n            }\n            for (var i = keys[keys.length - 1] + 1; i < newElements.length; ++i) {\n                newElements[i] = this.collection[i - keys.length];\n                indexMap[i - keys.length] = i;\n            }\n        }\n        this.internalTryToChangeCollection(indexMap, newElements);\n    }\n    internalRemoveElements(indexes) {\n        indexes = indexes.sort(function (number1, number2) {\n            return number1 - number2;\n        });\n        const indexMap = {};\n        const newElements = new Array();\n        var counter = 0;\n        for (var i = 0; i < this.collection.length; ++i) {\n            if (i === indexes[counter]) {\n                ++counter;\n            }\n            else {\n                newElements[i - counter] = this.collection[i];\n                indexMap[i] = i - counter;\n            }\n        }\n        this.internalTryToChangeCollection(indexMap, newElements);\n    }\n    internalTryToChangeCollection(indexMap = {}, newElements) {\n        const cancelableChangeEventArgs = new CancelableCollectionChangeEventArgs(indexMap, newElements);\n        this.eventEmitter.emit(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, cancelableChangeEventArgs);\n        if (!cancelableChangeEventArgs.getPreventDefault()) {\n            this.collection = newElements;\n        }\n        const changeEventArgs = new CollectionChangeEventArgs(indexMap, newElements, cancelableChangeEventArgs.getPreventDefault());\n        this.eventEmitter.emit(COLLECTION_MANAGER_EVENTS.collectionAfterChange, changeEventArgs);\n        return changeEventArgs;\n    }\n}\n\n//# sourceMappingURL=collection-manager.js.map\n","import { CollectionManager } from './collection-manager';\nexport class HtmlChildrenManager extends CollectionManager {\n    constructor(collection, eventEmitter, parentElement) {\n        super(collection, eventEmitter);\n        this.parentElement = parentElement;\n    }\n    internalTryToChangeCollection(indexMap = {}, newElements) {\n        const eventArgs = super.internalTryToChangeCollection(indexMap, newElements);\n        if (!eventArgs.getPreventDefault()) {\n            var deletionPivot = 0;\n            var insertionPivot = 0;\n            var oldIndexesCounter = 0;\n            var newIndexesCounter = 0;\n            for (const key in indexMap) {\n                if (indexMap.hasOwnProperty(key)) {\n                    const keyNumber = Number(key);\n                    for (var i = oldIndexesCounter; i < keyNumber; ++i) {\n                        this.parentElement.removeChild(this.parentElement.children[i + insertionPivot - deletionPivot]);\n                        ++deletionPivot;\n                    }\n                    const newIndex = indexMap[key];\n                    for (var i = newIndexesCounter; i < newIndex; ++i) {\n                        this.parentElement.insertBefore(newElements[i], this.parentElement.children[i]);\n                        ++insertionPivot;\n                    }\n                    oldIndexesCounter = keyNumber + 1;\n                    newIndexesCounter = newIndex + 1;\n                }\n            }\n            for (var i = newIndexesCounter; i < newElements.length; ++i) {\n                this.parentElement.appendChild(newElements[i]);\n            }\n        }\n        return eventArgs;\n    }\n}\n\n//# sourceMappingURL=html-children-manager.js.map\n","export class TokenMap {\n    constructor() {\n        this.innerMap = new Map();\n        this.unusedIndexes = new Array();\n    }\n    add(elem) {\n        if (0 === this.unusedIndexes.length) {\n            const lastIndex = this.innerMap.size;\n            this.innerMap.set(lastIndex, elem);\n            return lastIndex;\n        }\n        else {\n            const lastIndex = this.unusedIndexes[this.unusedIndexes.length - 1];\n            --this.unusedIndexes.length;\n            this.innerMap.set(lastIndex, elem);\n            return lastIndex;\n        }\n    }\n    count() {\n        return this.innerMap.size;\n    }\n    foreach(consumer) {\n        this.innerMap.forEach(function (value, key) {\n            consumer(value, key);\n        });\n    }\n    get(index) {\n        return this.innerMap.get(index);\n    }\n    remove(index) {\n        if (this.innerMap.has(index)) {\n            this.innerMap.delete(index);\n            this.unusedIndexes[this.unusedIndexes.length] = index;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\n\n//# sourceMappingURL=token-map.js.map\n","require('core-js/fn/promise');\nimport { SINGLE_SLIDE_CAROUSEL_ACTIONS, SINGLE_SLIDE_CAROUSEL_EVENTS, SINGLE_SLIDE_CAROUSEL_STYLES, SingleSlideCarousel, } from './carousel/single-slide/single-slide-carousel';\nconst sora = function () {\n    return {\n        SingleSlideCarousel: SingleSlideCarousel,\n        actions: {\n            SINGLE_SLIDE_CAROUSEL_ACTIONS: SINGLE_SLIDE_CAROUSEL_ACTIONS,\n        },\n        events: {\n            SINGLE_SLIDE_CAROUSEL_EVENTS: SINGLE_SLIDE_CAROUSEL_EVENTS,\n        },\n        styles: {\n            SINGLE_SLIDE_CAROUSEL_STYLES: SINGLE_SLIDE_CAROUSEL_STYLES,\n        },\n    };\n}();\nmodule.exports = sora;\n\n//# sourceMappingURL=main.js.map\n","import { AnimationPlayStateValue } from '../carousel/animation/animation-play-state';\nimport { CAROUSEL_STYLES } from '../carousel/carousel-base';\nimport { OperationManager } from './operation-manager';\nimport { TaskEngine } from './task-engine';\nexport const ANIMATION_OPERATION_EVENTS = {\n    ANIMATION_CANCEL: 'anim.cancel',\n    ANIMATION_STATE_CHANGE: 'anim.state.change',\n};\nexport class SingleAnimationEngine extends TaskEngine {\n    constructor() {\n        super();\n        this.animationCancelManager =\n            new OperationManager(ANIMATION_OPERATION_EVENTS.ANIMATION_CANCEL, this.eventEmitter);\n        this.animationStateChangeManager =\n            new OperationManager(ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE, this.eventEmitter);\n    }\n    dispose() {\n        this.animationCancelManager.dispose();\n        this.animationStateChangeManager.dispose();\n    }\n    cancelAnimation(aliases) {\n        this.eventEmitter.emit(ANIMATION_OPERATION_EVENTS.ANIMATION_CANCEL, { aliases: aliases });\n    }\n    pause(aliases) {\n        this.eventEmitter.emit(ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE, {\n            aliases: aliases,\n            value: AnimationPlayStateValue.paused,\n        });\n    }\n    resume(aliases) {\n        this.eventEmitter.emit(ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE, {\n            aliases: aliases,\n            value: AnimationPlayStateValue.running,\n        });\n    }\n    handleTaskPart(part) {\n        const that = this;\n        part.pendingOperations = {\n            cancel: {\n                isPending: false,\n                operationToken: this.animationCancelManager.subscribe(part.alias, function (eventArgs) {\n                    part.pendingOperations.cancel.isPending = true;\n                    that.animationCancelManager.unsubscribe(part.alias, part.pendingOperations.cancel.operationToken);\n                }),\n            },\n            pause: {\n                isPending: false,\n                operationToken: this.animationStateChangeManager.subscribe(part.alias, function (eventArgs) {\n                    part.pendingOperations.pause.isPending =\n                        eventArgs.value === AnimationPlayStateValue.paused;\n                }),\n            },\n        };\n        return super.handleTaskPart(part);\n    }\n    performTask(part) {\n        this.animationCancelManager.unsubscribe(part.alias, part.pendingOperations.cancel.operationToken);\n        this.animationStateChangeManager.unsubscribe(part.alias, part.pendingOperations.pause.operationToken);\n        const promises = new Array(part.elements.length);\n        for (var i = 0; i < part.elements.length; ++i) {\n            promises[i] = this.handleAnimationOverElement(part.elements[i], part);\n        }\n        if (part.pendingOperations) {\n            if (part.pendingOperations.pause.isPending) {\n                this.pause([part.alias]);\n            }\n            if (part.pendingOperations.cancel.isPending) {\n                this.cancelAnimation([part.alias]);\n            }\n        }\n        return Promise.all(promises);\n    }\n    handleAnimationOverElement(element, part) {\n        const styles = part.styles;\n        if (styles) {\n            if (styles.length < 1) {\n                throw new Error('It\\'s required to have at least one class to generate an animation.');\n            }\n        }\n        else {\n            throw new Error('It\\'s required to have an array of styles to generate an animation.');\n        }\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                const animationFunctions = new Array();\n                var currentAnimationIndex = null;\n                const onAnimationCancel = function (args) {\n                    onAnimationPlayStateChange({ aliases: args.aliases, value: AnimationPlayStateValue.running });\n                    element.classList.add(CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    if (null != currentAnimationIndex) {\n                        element.classList.remove(styles[currentAnimationIndex]);\n                    }\n                    that.unregisterAnimationListener(element, animationFunctions[currentAnimationIndex]);\n                    element.classList.remove(CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    that.animationCancelManager.unsubscribe(part.alias, cancelToken);\n                    that.animationStateChangeManager.unsubscribe(part.alias, playStateChangetoken);\n                    resolve();\n                };\n                const cancelToken = that.animationCancelManager.subscribe(part.alias, onAnimationCancel);\n                const onAnimationPlayStateChange = function (args) {\n                    if (AnimationPlayStateValue.paused === args.value) {\n                        if (!element.classList.contains(CAROUSEL_STYLES.ANIMATION_PAUSED)) {\n                            element.classList.add(CAROUSEL_STYLES.ANIMATION_PAUSED);\n                        }\n                    }\n                    else if (AnimationPlayStateValue.running === args.value) {\n                        if (element.classList.contains(CAROUSEL_STYLES.ANIMATION_PAUSED)) {\n                            element.classList.remove(CAROUSEL_STYLES.ANIMATION_PAUSED);\n                        }\n                    }\n                };\n                const playStateChangetoken = that.animationStateChangeManager.subscribe(part.alias, onAnimationPlayStateChange);\n                for (var i = 1; i < styles.length; ++i) {\n                    animationFunctions.push(function (index) {\n                        return function (event) {\n                            element.classList.remove(styles[index - 1]);\n                            that.unregisterAnimationListener(element, animationFunctions[index - 1]);\n                            that.registerAnimationListener(element, animationFunctions[index]);\n                            element.classList.add(styles[index]);\n                            currentAnimationIndex = index;\n                        };\n                    }(i));\n                }\n                animationFunctions.push(function (event) {\n                    element.classList.add(CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    element.classList.remove(styles[styles.length - 1]);\n                    element.classList.remove(CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    that.unregisterAnimationListener(element, animationFunctions[animationFunctions.length - 1]);\n                    currentAnimationIndex = null;\n                    that.animationCancelManager.unsubscribe(part.alias, cancelToken);\n                    that.animationStateChangeManager.unsubscribe(part.alias, playStateChangetoken);\n                    resolve();\n                });\n                that.registerAnimationListener(element, animationFunctions[0]);\n                element.classList.add(styles[0]);\n                currentAnimationIndex = 0;\n            }\n            catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n    registerAnimationListener(element, listener) {\n        element.addEventListener('animationend', listener);\n        element.addEventListener('webkitAnimationEnd', listener);\n    }\n    unregisterAnimationListener(element, listener) {\n        element.removeEventListener('animationend', listener);\n        element.removeEventListener('webkitAnimationEnd', listener);\n    }\n}\n\n//# sourceMappingURL=animation-engine.js.map\n","export class TaskPartWhenConstraint {\n    constructor(after, constraintType) {\n        this.after = after;\n        this.constraintType = constraintType;\n    }\n}\n\n//# sourceMappingURL=task-flow-when.js.map\n","import { TaskPartWhenConstraint, } from './task-flow-when';\nexport const TASK_CONSTRAINT_TYPES = {\n    END: 'anim.end',\n    GROUP: 'group',\n    START: 'anim.start',\n    WAIT_FOR: 'wait',\n};\nexport class TaskPartConstraint extends TaskPartWhenConstraint {\n    constructor(after, alias, constraintType) {\n        super(after, constraintType);\n        this.alias = alias;\n    }\n}\n\n//# sourceMappingURL=task-part-constraint.js.map\n","import { TokenMap } from '../collection/token-map';\nexport class OperationManager {\n    constructor(eventAlias, eventEmitter) {\n        const that = this;\n        this.callFunction = function (eventArgs) {\n            if (eventArgs.aliases == null) {\n                for (const alias in that.subscriptionStorage) {\n                    if (that.subscriptionStorage.hasOwnProperty(alias)) {\n                        const subscribers = that.subscriptionStorage[alias];\n                        if (subscribers != null) {\n                            subscribers.foreach(function (value) {\n                                value(eventArgs);\n                            });\n                        }\n                    }\n                }\n            }\n            else {\n                for (const alias of eventArgs.aliases) {\n                    const subscribers = that.subscriptionStorage[alias];\n                    if (subscribers != null) {\n                        subscribers.foreach(function (value) {\n                            value(eventArgs);\n                        });\n                    }\n                }\n            }\n        };\n        this.eventAlias = eventAlias;\n        this.eventEmitter = eventEmitter;\n        this.subscriptionStorage = {};\n        this.eventEmitter.addListener(this.eventAlias, this.callFunction);\n    }\n    dispose() {\n        this.eventEmitter.removeListener(this.eventAlias, this.callFunction);\n    }\n    subscribe(alias, handler) {\n        if (null == this.subscriptionStorage[alias]) {\n            this.subscriptionStorage[alias] = new TokenMap();\n        }\n        return this.subscriptionStorage[alias].add(handler);\n    }\n    unsubscribe(alias, index) {\n        if (null == this.subscriptionStorage[alias]) {\n            return false;\n        }\n        else {\n            return this.subscriptionStorage[alias].remove(index);\n        }\n    }\n}\n\n//# sourceMappingURL=operation-manager.js.map\n","import { EventEmitter } from 'events';\nimport { TASK_CONSTRAINT_TYPES } from './flow/task-part-constraint';\nconst TASK_PART_WHEN_EVENT_PREFIXES = {\n    END: 'anim.end.',\n    START: 'anim.start.',\n};\nexport var TaskPartWhenOperator;\n(function (TaskPartWhenOperator) {\n    TaskPartWhenOperator[TaskPartWhenOperator[\"AND\"] = 0] = \"AND\";\n    TaskPartWhenOperator[TaskPartWhenOperator[\"OR\"] = 1] = \"OR\";\n})(TaskPartWhenOperator || (TaskPartWhenOperator = {}));\nexport class TaskEngine {\n    constructor() {\n        this.eventEmitter = new EventEmitter();\n    }\n    handle(taskFlow) {\n        if (taskFlow == null) {\n            throw new Error('It\\'s required a task flow.');\n        }\n        if (taskFlow.parts == null) {\n            throw new Error('It\\'s required a task flow with parts.');\n        }\n        this.currentTask = taskFlow;\n        const partPromises = new Array(taskFlow.parts.length);\n        for (var i = 0; i < taskFlow.parts.length; ++i) {\n            partPromises[i] = this.handleTaskPart(taskFlow.parts[i]);\n        }\n        return partPromises;\n    }\n    handleTaskPart(part) {\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            that.handleTaskPartWhen(part.when).then(function () {\n                that.eventEmitter.emit(TASK_PART_WHEN_EVENT_PREFIXES.START + part.alias, {});\n                const promise = that.performTask(part);\n                promise.then(function () {\n                    that.eventEmitter.emit(TASK_PART_WHEN_EVENT_PREFIXES.END + part.alias, {});\n                    resolve();\n                });\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    }\n    handleTaskPartWhen(whenEntity) {\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            if (null == whenEntity) {\n                resolve();\n            }\n            else {\n                switch (whenEntity.constraintType) {\n                    case TASK_CONSTRAINT_TYPES.START:\n                        that.handleTaskPartWhenPartBegins(whenEntity)\n                            .then(resolve);\n                        break;\n                    case TASK_CONSTRAINT_TYPES.END:\n                        that.handleTaskPartWhenPartEnds(whenEntity)\n                            .then(resolve);\n                        break;\n                    case TASK_CONSTRAINT_TYPES.GROUP:\n                        that.handleTaskPartWhenPartGroup(whenEntity)\n                            .then(resolve);\n                        break;\n                    case TASK_CONSTRAINT_TYPES.WAIT_FOR:\n                        that.handleTaskPartWhenWaitFor(whenEntity)\n                            .then(resolve);\n                        break;\n                    default:\n                        throw new Error('Unexpected when entity type.');\n                }\n            }\n        });\n    }\n    handleTaskPartWhenPartBegins(whenEntity) {\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            const eventName = TASK_PART_WHEN_EVENT_PREFIXES.START + whenEntity.alias;\n            const eventHandler = function () {\n                that.eventEmitter.removeListener(eventName, eventHandler);\n                if (null == whenEntity.after) {\n                    resolve();\n                }\n                else {\n                    that.handleTaskPartWhen(whenEntity.after)\n                        .then(resolve);\n                }\n            };\n            that.eventEmitter.addListener(eventName, eventHandler);\n        });\n    }\n    handleTaskPartWhenPartEnds(whenEntity) {\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            const eventName = TASK_PART_WHEN_EVENT_PREFIXES.END + whenEntity.alias;\n            const eventHandler = function () {\n                that.eventEmitter.removeListener(eventName, eventHandler);\n                if (null == whenEntity.after) {\n                    resolve();\n                }\n                else {\n                    that.handleTaskPartWhen(whenEntity.after)\n                        .then(resolve);\n                }\n            };\n            that.eventEmitter.addListener(eventName, eventHandler);\n        });\n    }\n    handleTaskPartWhenPartGroup(whenEntity) {\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            const childPromises = new Array(whenEntity.constraints.length);\n            for (var i = 0; i < whenEntity.constraints.length; ++i) {\n                childPromises[i] = new Promise(function (resolve, reject) {\n                    that.handleTaskPartWhen(whenEntity.constraints[i])\n                        .then(resolve);\n                });\n            }\n            if (TaskPartWhenOperator.AND === whenEntity.operator) {\n                Promise.all(childPromises)\n                    .then(function () {\n                    resolve();\n                });\n            }\n            else if (TaskPartWhenOperator.OR === whenEntity.operator) {\n                Promise.race(childPromises)\n                    .then(function () {\n                    resolve();\n                });\n            }\n            else {\n                reject('Unexpected operator.');\n            }\n        });\n    }\n    handleTaskPartWhenWaitFor(whenEntity) {\n        const that = this;\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                if (whenEntity.after == null) {\n                    resolve();\n                }\n                else {\n                    that.handleTaskPartWhen(whenEntity.after)\n                        .then(resolve);\n                }\n            }, whenEntity.millis);\n        });\n    }\n}\n\n//# sourceMappingURL=task-engine.js.map\n","module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/map\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/get-own-property-descriptor\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/promise\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","\"use strict\";\n\nexports.__esModule = true;\n\nvar _getPrototypeOf = require(\"../core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _getOwnPropertyDescriptor = require(\"../core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);\n\n  if (desc === undefined) {\n    var parent = (0, _getPrototypeOf2.default)(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nrequire('../modules/es7.promise.finally');\nrequire('../modules/es7.promise.try');\nmodule.exports = require('../modules/_core').Promise;\n","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.map');\nrequire('../modules/es7.map.to-json');\nrequire('../modules/es7.map.of');\nrequire('../modules/es7.map.from');\nmodule.exports = require('../modules/_core').Map;\n","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","require('../../modules/es6.object.get-own-property-descriptor');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function getOwnPropertyDescriptor(it, key) {\n  return $Object.getOwnPropertyDescriptor(it, key);\n};\n","require('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var forOf = require('./_for-of');\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof');\nvar from = require('./_array-from-iterable');\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar meta = require('./_meta');\nvar fails = require('./_fails');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar setToStringTag = require('./_set-to-string-tag');\nvar dP = require('./_object-dp').f;\nvar each = require('./_array-methods')(0);\nvar DESCRIPTORS = require('./_descriptors');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    C = wrapper(function (target, iterable) {\n      anInstance(target, C, NAME, '_c');\n      target._c = new Base();\n      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {\n        anInstance(this, C, KEY);\n        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    IS_WEAK || dP(C.prototype, 'size', {\n      get: function () {\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = true;\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n","module.exports = require('./_hide');\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar ctx = require('./_ctx');\nvar forOf = require('./_for-of');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = new Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n",null,"'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\nrequire('./_set-collection-from')('Map');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\nrequire('./_set-collection-of')('Map');\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = false;\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}