{"version":3,"sources":["dist/js/node_modules/browser-pack/_prelude.js","dist/js/dist/js/tmp/src/carousel/animation/animation-play-state.js","dist/js/dist/js/tmp/src/carousel/carousel-base.js","dist/js/dist/js/tmp/src/carousel/carousel-basic.js","dist/js/dist/js/tmp/src/collection/collection-manager.js","dist/js/dist/js/tmp/src/collection/html-children-manager.js","dist/js/dist/js/tmp/src/main.test.js","dist/js/dist/js/tmp/src/task/animation-engine.js","dist/js/dist/js/tmp/src/task/operation-manager.js","dist/js/dist/js/tmp/src/task/task-engine.js","dist/js/dist/js/tmp/src/test/carousel/carousel-basic.test.js","dist/js/dist/js/tmp/src/test/collection/collection-manager.test.js","dist/js/node_modules/babel-runtime/core-js/object/assign.js","dist/js/node_modules/babel-runtime/core-js/object/create.js","dist/js/node_modules/babel-runtime/core-js/object/define-property.js","dist/js/node_modules/babel-runtime/core-js/object/get-own-property-descriptor.js","dist/js/node_modules/babel-runtime/core-js/object/get-prototype-of.js","dist/js/node_modules/babel-runtime/core-js/object/set-prototype-of.js","dist/js/node_modules/babel-runtime/core-js/promise.js","dist/js/node_modules/babel-runtime/core-js/symbol.js","dist/js/node_modules/babel-runtime/core-js/symbol/iterator.js","dist/js/node_modules/babel-runtime/helpers/classCallCheck.js","dist/js/node_modules/babel-runtime/helpers/createClass.js","dist/js/node_modules/babel-runtime/helpers/get.js","dist/js/node_modules/babel-runtime/helpers/inherits.js","dist/js/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","dist/js/node_modules/babel-runtime/helpers/typeof.js","dist/js/node_modules/core-js/library/fn/object/assign.js","dist/js/node_modules/core-js/library/fn/object/create.js","dist/js/node_modules/core-js/library/fn/object/define-property.js","dist/js/node_modules/core-js/library/fn/object/get-own-property-descriptor.js","dist/js/node_modules/core-js/library/fn/object/get-prototype-of.js","dist/js/node_modules/core-js/library/fn/object/set-prototype-of.js","dist/js/node_modules/core-js/library/fn/promise.js","dist/js/node_modules/core-js/library/fn/symbol/index.js","dist/js/node_modules/core-js/library/fn/symbol/iterator.js","dist/js/node_modules/core-js/library/modules/_a-function.js","dist/js/node_modules/core-js/library/modules/_add-to-unscopables.js","dist/js/node_modules/core-js/library/modules/_an-instance.js","dist/js/node_modules/core-js/library/modules/_an-object.js","dist/js/node_modules/core-js/library/modules/_array-includes.js","dist/js/node_modules/core-js/library/modules/_classof.js","dist/js/node_modules/core-js/library/modules/_cof.js","dist/js/node_modules/core-js/library/modules/_core.js","dist/js/node_modules/core-js/library/modules/_ctx.js","dist/js/node_modules/core-js/library/modules/_defined.js","dist/js/node_modules/core-js/library/modules/_descriptors.js","dist/js/node_modules/core-js/library/modules/_dom-create.js","dist/js/node_modules/core-js/library/modules/_enum-bug-keys.js","dist/js/node_modules/core-js/library/modules/_enum-keys.js","dist/js/node_modules/core-js/library/modules/_export.js","dist/js/node_modules/core-js/library/modules/_fails.js","dist/js/node_modules/core-js/library/modules/_for-of.js","dist/js/node_modules/core-js/library/modules/_global.js","dist/js/node_modules/core-js/library/modules/_has.js","dist/js/node_modules/core-js/library/modules/_hide.js","dist/js/node_modules/core-js/library/modules/_html.js","dist/js/node_modules/core-js/library/modules/_ie8-dom-define.js","dist/js/node_modules/core-js/library/modules/_invoke.js","dist/js/node_modules/core-js/library/modules/_iobject.js","dist/js/node_modules/core-js/library/modules/_is-array-iter.js","dist/js/node_modules/core-js/library/modules/_is-array.js","dist/js/node_modules/core-js/library/modules/_is-object.js","dist/js/node_modules/core-js/library/modules/_iter-call.js","dist/js/node_modules/core-js/library/modules/_iter-create.js","dist/js/node_modules/core-js/library/modules/_iter-define.js","dist/js/node_modules/core-js/library/modules/_iter-detect.js","dist/js/node_modules/core-js/library/modules/_iter-step.js","dist/js/node_modules/core-js/library/modules/_iterators.js","dist/js/node_modules/core-js/library/modules/_library.js","dist/js/node_modules/core-js/library/modules/_meta.js","dist/js/node_modules/core-js/library/modules/_microtask.js","dist/js/node_modules/core-js/library/modules/_new-promise-capability.js","dist/js/node_modules/core-js/library/modules/_object-assign.js","dist/js/node_modules/core-js/library/modules/_object-create.js","dist/js/node_modules/core-js/library/modules/_object-dp.js","dist/js/node_modules/core-js/library/modules/_object-dps.js","dist/js/node_modules/core-js/library/modules/_object-gopd.js","dist/js/node_modules/core-js/library/modules/_object-gopn-ext.js","dist/js/node_modules/core-js/library/modules/_object-gopn.js","dist/js/node_modules/core-js/library/modules/_object-gops.js","dist/js/node_modules/core-js/library/modules/_object-gpo.js","dist/js/node_modules/core-js/library/modules/_object-keys-internal.js","dist/js/node_modules/core-js/library/modules/_object-keys.js","dist/js/node_modules/core-js/library/modules/_object-pie.js","dist/js/node_modules/core-js/library/modules/_object-sap.js","dist/js/node_modules/core-js/library/modules/_perform.js","dist/js/node_modules/core-js/library/modules/_promise-resolve.js","dist/js/node_modules/core-js/library/modules/_property-desc.js","dist/js/node_modules/core-js/library/modules/_redefine-all.js","dist/js/node_modules/core-js/library/modules/_redefine.js","dist/js/node_modules/core-js/library/modules/_set-proto.js","dist/js/node_modules/core-js/library/modules/_set-species.js","dist/js/node_modules/core-js/library/modules/_set-to-string-tag.js","dist/js/node_modules/core-js/library/modules/_shared-key.js","dist/js/node_modules/core-js/library/modules/_shared.js","dist/js/node_modules/core-js/library/modules/_species-constructor.js","dist/js/node_modules/core-js/library/modules/_string-at.js","dist/js/node_modules/core-js/library/modules/_task.js","dist/js/node_modules/core-js/library/modules/_to-absolute-index.js","dist/js/node_modules/core-js/library/modules/_to-integer.js","dist/js/node_modules/core-js/library/modules/_to-iobject.js","dist/js/node_modules/core-js/library/modules/_to-length.js","dist/js/node_modules/core-js/library/modules/_to-object.js","dist/js/node_modules/core-js/library/modules/_to-primitive.js","dist/js/node_modules/core-js/library/modules/_uid.js","dist/js/node_modules/core-js/library/modules/_user-agent.js","dist/js/node_modules/core-js/library/modules/_wks-define.js","dist/js/node_modules/core-js/library/modules/_wks-ext.js","dist/js/node_modules/core-js/library/modules/_wks.js","dist/js/node_modules/core-js/library/modules/core.get-iterator-method.js","dist/js/node_modules/core-js/library/modules/es6.array.iterator.js","dist/js/node_modules/core-js/library/modules/es6.object.assign.js","dist/js/node_modules/core-js/library/modules/es6.object.create.js","dist/js/node_modules/core-js/library/modules/es6.object.define-property.js","dist/js/node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js","dist/js/node_modules/core-js/library/modules/es6.object.get-prototype-of.js","dist/js/node_modules/core-js/library/modules/es6.object.set-prototype-of.js","dist/js/node_modules/core-js/library/modules/es6.object.to-string.js","dist/js/node_modules/core-js/library/modules/es6.promise.js","dist/js/node_modules/core-js/library/modules/es6.string.iterator.js","dist/js/node_modules/core-js/library/modules/es6.symbol.js","dist/js/node_modules/core-js/library/modules/es7.promise.finally.js","dist/js/node_modules/core-js/library/modules/es7.promise.try.js","dist/js/node_modules/core-js/library/modules/es7.symbol.async-iterator.js","dist/js/node_modules/core-js/library/modules/es7.symbol.observable.js","dist/js/node_modules/core-js/library/modules/web.dom.iterable.js","dist/js/node_modules/events/events.js"],"names":[],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnfile":"bundle.test.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export var AnimationPlayStateValue;\n(function (AnimationPlayStateValue) {\n    AnimationPlayStateValue[AnimationPlayStateValue[\"paused\"] = 0] = \"paused\";\n    AnimationPlayStateValue[AnimationPlayStateValue[\"running\"] = 1] = \"running\";\n})(AnimationPlayStateValue || (AnimationPlayStateValue = {}));\n\n//# sourceMappingURL=animation-play-state.js.map\n","export var CarouselBase;\n(function (CarouselBase_1) {\n    CarouselBase_1.CAROUSEL_STYLES = {\n        ANIMATION_PAUSED: 'sora-animation-paused',\n        CLEAR_ANIMATION: 'sora-clear-animations',\n        CAROUSEL: 'sora-carousel',\n        SLIDE: 'sora-slide',\n        WRAPPER: 'sora-wrapper',\n    };\n    class CarouselBase {\n        constructor() { }\n    }\n    CarouselBase_1.CarouselBase = CarouselBase;\n})(CarouselBase || (CarouselBase = {}));\n\n//# sourceMappingURL=carousel-base.js.map\n","import { CarouselBase } from './carousel-base';\nimport { AnimationPlayStateValue } from './animation/animation-play-state';\nimport { EventEmitter } from 'events';\nimport { COLLECTION_MANAGER_EVENTS, } from '../collection/collection-manager';\nimport { HtmlChildrenManager } from '../collection/html-children-manager';\nimport { SingleAnimationEngine } from '../task/animation-engine';\nexport var CarouselBasic;\n(function (CarouselBasic) {\n    CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS = {\n        GO_TO: 'to',\n        GO_TO_NEXT: 'next',\n        GO_TO_PREVIOUS: 'prev',\n    };\n    CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS = {\n        ON_ANIMATION_END: 'car.anim.out',\n        ON_ANIMATION_PLAY_STATE_CHANGE: 'car.anim.state.ch',\n        ON_ANIMATION_START: 'car.anim.in',\n        ON_CANCEL_ANIMATION: 'car.anim.cancel',\n        ON_SLIDE_ENTER: 'car.sl.in',\n        ON_SLIDE_LEAVE: 'car.sl.out',\n    };\n    const SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES = {\n        ENTER: 'enter-part',\n        LEAVE: 'leave-part',\n    };\n    CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES = {\n        SLIDE_HIDDEN: 'sora-hidden',\n        SLIDE_ACTIVE: 'sora-slide-active',\n    };\n    class SingleSlideCarousel extends CarouselBase.CarouselBase {\n        constructor(element, options) {\n            super();\n            if (element == null)\n                throw new Error('The element must not be null.');\n            if (!element.classList.contains(CarouselBase.CAROUSEL_STYLES.CAROUSEL))\n                throw new Error('The carousel element must contain the class \"' + CarouselBase.CAROUSEL_STYLES.CAROUSEL + '\".');\n            var soraWrapper = element.querySelector('.' + CarouselBase.CAROUSEL_STYLES.WRAPPER);\n            if (soraWrapper == null)\n                throw new Error('The element has no child with class \\'sora-wrapper\\'.');\n            var children = new Array();\n            for (var i = 0; i < soraWrapper.children.length; ++i) {\n                if (soraWrapper.children[i].classList.contains(CarouselBase.CAROUSEL_STYLES.SLIDE))\n                    children.push(soraWrapper.children[i]);\n            }\n            this.activeIndex = options.index || 0;\n            this.currentAnimation = null;\n            this.eventEmitter = new EventEmitter();\n            this.elementsManager = new HtmlChildrenManager(children, this.eventEmitter, soraWrapper);\n            if (this.activeIndex < 0 || this.activeIndex >= this.elementsManager.getLength())\n                throw new Error('Invalid options.index. There is no element with index ' + options.index + '.');\n            for (var i = 0; i < children.length; ++i) {\n                if (i == this.activeIndex)\n                    children[i].classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                else\n                    children[i].classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            }\n            var that = this;\n            var onBeforeChange = function (eventArgs) {\n                var indexMap = eventArgs.getIndexMap();\n                if (indexMap[that.activeIndex] == null)\n                    eventArgs.setPreventDefault();\n            };\n            var onAfterChange = function (eventArgs) {\n                if (!eventArgs.getPreventDefault()) {\n                    var indexMap = eventArgs.getIndexMap();\n                    that.activeIndex = indexMap[that.activeIndex];\n                }\n            };\n            this.addListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n            this.addListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n            this.engineAnimation = new SingleAnimationEngine();\n        }\n        addListener(event, listener) {\n            this.eventEmitter.addListener(event, listener);\n        }\n        createWaitPromise(options) {\n            var that = this;\n            return new Promise(function (resolve, reject) {\n                var lastTimeRun;\n                var timeToWait = options.millis;\n                if (that.paused) {\n                    lastTimeRun = null;\n                }\n                else {\n                    var waitInterval = setInterval(function () {\n                        removeListeners();\n                        resolve();\n                    }, timeToWait);\n                    lastTimeRun = new Date().getTime();\n                }\n                var onCancelAnimation = null;\n                if (options.stopOnCancelAnimation) {\n                    onCancelAnimation = function () {\n                        removeListeners();\n                        resolve();\n                    };\n                    that.addListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, onCancelAnimation);\n                }\n                var onPlayStateChange = function (args) {\n                    if (AnimationPlayStateValue.paused == args.value) {\n                        timeToWait = timeToWait - (new Date().getTime() - lastTimeRun);\n                        clearInterval(waitInterval);\n                    }\n                    else if (AnimationPlayStateValue.running == args.value) {\n                        lastTimeRun = new Date().getTime();\n                        if (timeToWait > 0)\n                            waitInterval = setInterval(function () {\n                                that.removeListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n                                if (onCancelAnimation != null)\n                                    that.removeListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, onCancelAnimation);\n                                resolve();\n                            }, timeToWait);\n                        else {\n                            removeListeners();\n                            resolve();\n                        }\n                    }\n                };\n                var removeListeners = function () {\n                    that.removeListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n                    if (onCancelAnimation != null)\n                        that.removeListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, onCancelAnimation);\n                };\n                that.addListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, onPlayStateChange);\n            });\n        }\n        forceActiveSlide(activeIndex) {\n            var eventArgs = {\n                activeIndex: activeIndex,\n            };\n            if (this.isPaused())\n                this.resume();\n            this.engineAnimation.cancelAnimation(null);\n            this.activeIndex = activeIndex;\n            this.resetCarouselStructure(activeIndex);\n            this.eventEmitter.emit(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, eventArgs);\n        }\n        generateGoToAnimationFlow(enterElement, leaveElement, options) {\n            var innerParts = [\n                {\n                    alias: SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.ENTER,\n                    elements: [enterElement,],\n                    styles: options.enterAnimation.slideStyles,\n                    when: null,\n                },\n                {\n                    alias: SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.LEAVE,\n                    elements: [leaveElement,],\n                    styles: options.leaveAnimation.slideStyles,\n                    when: null,\n                },\n            ];\n            var generateChildrenParts = function (parentElement, childrenStyles, aliasBase) {\n                if (childrenStyles) {\n                    for (var i = 0; i < childrenStyles.length; ++i) {\n                        innerParts.push({\n                            alias: aliasBase + i.toString(),\n                            elements: function () {\n                                var elements = new Array();\n                                var animationObject = childrenStyles[i];\n                                var childrenElements = parentElement.querySelectorAll(animationObject.selector);\n                                for (var j = 0; j < childrenElements.length; ++j)\n                                    elements.push(childrenElements[j]);\n                                return elements;\n                            }(),\n                            styles: childrenStyles[i].styles,\n                            when: null,\n                        });\n                    }\n                }\n            };\n            generateChildrenParts(enterElement, options.enterAnimation.childrenStyles, SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.ENTER);\n            generateChildrenParts(leaveElement, options.leaveAnimation.childrenStyles, SINGLE_SLIDE_CAROUSEL_PARTS_ALIASES.LEAVE);\n            var innerPartsMap = {};\n            for (var i = 0; i < innerParts.length; ++i)\n                innerPartsMap[innerParts[i].alias] = innerParts[i];\n            var innerGetPartByAlias = function (alias) {\n                return innerPartsMap[alias];\n            };\n            var animationFlow = {\n                parts: innerParts,\n                getPartByAlias: innerGetPartByAlias,\n            };\n            return animationFlow;\n        }\n        getActiveElement() {\n            return this.elementsManager.getCollection()[this.activeIndex];\n        }\n        getActiveIndex() {\n            return this.activeIndex;\n        }\n        getElementsManager() {\n            return this.elementsManager;\n        }\n        hasActiveAnimation() {\n            return this.currentAnimation != null;\n        }\n        isPaused() {\n            return this.paused;\n        }\n        handle(action, options) {\n            switch (action) {\n                case CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO:\n                    if (options == null || typeof options.index !== 'number')\n                        throw new Error('Invalid options for \\'' + CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO + '\\'.');\n                    return this.handleGoTo(options);\n                case CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_NEXT:\n                    options.index = (this.activeIndex + 1) % this.elementsManager.getLength();\n                    return this.handle(CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO, options);\n                case CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_PREVIOUS:\n                    var elementsLength = this.elementsManager.getLength();\n                    options.index = ((this.activeIndex - 1) % elementsLength + elementsLength) % elementsLength;\n                    return this.handle(CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO, options);\n            }\n        }\n        pause() {\n            if (!this.paused) {\n                this.engineAnimation.pause(null);\n                this.paused = true;\n                this.eventEmitter.emit(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, { value: AnimationPlayStateValue.paused, });\n            }\n        }\n        removeListener(event, listener) {\n            this.eventEmitter.removeListener(event, listener);\n        }\n        resume() {\n            if (this.paused) {\n                this.engineAnimation.resume(null);\n                this.paused = false;\n                this.eventEmitter.emit(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_PLAY_STATE_CHANGE, { value: AnimationPlayStateValue.running, });\n            }\n        }\n        handleGoTo(options) {\n            if (options.index < 0 || options.index >= this.elementsManager.getLength())\n                throw new Error('Invalid index. There is no element with index ' + options.index + '.');\n            if (options.index == this.activeIndex)\n                throw new Error('Invalid index. It\\'s not allowed to go to the current active slide');\n            if (null == this.currentAnimation)\n                this.currentAnimation = options;\n            else {\n                throw new Error('It\\'s not allowed to start an animation while an existing animation over an slide element is active');\n            }\n            var oldActiveElement = this.elementsManager.getCollection()[this.activeIndex];\n            var newActiveIndex = options.index;\n            this.eventEmitter.emit(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_START, {\n                options: options\n            });\n            var that = this;\n            var onBeforeChange = function (eventArgs) {\n                var indexMap = eventArgs.getIndexMap();\n                if (indexMap[newActiveIndex] == null)\n                    eventArgs.setPreventDefault();\n            };\n            var onAfterChange = function (eventArgs) {\n                if (!eventArgs.getPreventDefault()) {\n                    var indexMap = eventArgs.getIndexMap();\n                    newActiveIndex = indexMap[newActiveIndex];\n                }\n            };\n            this.addListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n            this.addListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n            var newActiveElement = this.elementsManager.getCollection()[newActiveIndex];\n            newActiveElement.classList.remove(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            var animationCanceled = false;\n            var cancelAnimationHandler = function () {\n                animationCanceled = true;\n                that.currentAnimation = null;\n            };\n            var animationFlow = this.generateGoToAnimationFlow(newActiveElement, oldActiveElement, options);\n            var animationPromises = this.engineAnimation.handle(animationFlow);\n            const ANIMATION_LEAVE_INDEX = 1;\n            var hideLeaveSlideAfterAnimationEnds = new Promise(function (resolve, reject) {\n                animationPromises[ANIMATION_LEAVE_INDEX].then(function (animationOptions) {\n                    if (!animationCanceled)\n                        oldActiveElement.classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                    resolve();\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            this.addListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, cancelAnimationHandler);\n            var soraHandlerStatus = new Promise(function (resolve, reject) {\n                Promise.all([\n                    animationPromises[0],\n                    hideLeaveSlideAfterAnimationEnds,\n                ]).then(function () {\n                    if (!animationCanceled) {\n                        oldActiveElement.classList.remove(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                        newActiveElement.classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                        that.activeIndex = newActiveIndex;\n                        that.currentAnimation = null;\n                    }\n                    that.removeListener(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, onBeforeChange);\n                    that.removeListener(COLLECTION_MANAGER_EVENTS.collectionAfterChange, onAfterChange);\n                    that.removeListener(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_CANCEL_ANIMATION, cancelAnimationHandler);\n                    that.eventEmitter.emit(CarouselBasic.SINGLE_SLIDE_CAROUSEL_EVENTS.ON_ANIMATION_END, {});\n                    resolve();\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            return {\n                animationPromises: animationPromises,\n                soraHandlerStatus: soraHandlerStatus,\n            };\n        }\n        resetCarouselStructure(activeIndex) {\n            var collection = this.elementsManager.getCollection();\n            for (var i = 0; i < collection.length; ++i) {\n                while (collection[i].classList.length > 0)\n                    collection[i].classList.remove(collection[i].classList.item(0));\n                collection[i].classList.add(CarouselBase.CAROUSEL_STYLES.SLIDE);\n                if (activeIndex === i)\n                    collection[i].classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                else\n                    collection[i].classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            }\n        }\n    }\n    CarouselBasic.SingleSlideCarousel = SingleSlideCarousel;\n})(CarouselBasic || (CarouselBasic = {}));\n\n//# sourceMappingURL=carousel-basic.js.map\n","export const COLLECTION_MANAGER_EVENTS = {\n    collectionAfterChange: 'coll.ch.a',\n    collectionBeforeChange: 'coll.ch.b',\n};\nexport class CollectionChangeEventArgs {\n    constructor(indexMap, newElements, preventDefault) {\n        this.indexMap = indexMap;\n        this.newElements = newElements;\n        this.preventDefault = preventDefault;\n    }\n    getIndexMap() {\n        return Object.assign({}, this.indexMap);\n    }\n    getNewElements() {\n        return Object.assign({}, this.newElements);\n    }\n    getPreventDefault() {\n        return this.preventDefault;\n    }\n}\nexport class CancelableCollectionChangeEventArgs extends CollectionChangeEventArgs {\n    constructor(indexMap, newElements) {\n        super(indexMap, newElements, false);\n    }\n    setPreventDefault() {\n        this.preventDefault = true;\n    }\n}\nexport class CollectionManager {\n    constructor(collection, eventEmitter) {\n        this.collection = collection;\n        this.eventEmitter = eventEmitter;\n    }\n    getCollection() {\n        return this.collection;\n    }\n    getLength() {\n        return this.collection.length;\n    }\n    insertElements(elements) {\n        this.internalInsertElements(elements);\n    }\n    internalInsertElements(elements) {\n        var keys = new Array();\n        for (var elemIndex in elements) {\n            var numberElemIndex = Number(elemIndex);\n            if (numberElemIndex < 0)\n                throw new Error('The index param should be greater or equals zero.');\n            if (numberElemIndex > this.collection.length)\n                throw new Error('The index param should be less or equals the number of elements of the collection.');\n            keys.push(numberElemIndex);\n        }\n        keys = keys.sort(function (number1, number2) {\n            return number1 - number2;\n        });\n        if (keys.length == 0)\n            return;\n        var newElements = new Array(this.collection.length + keys.length);\n        var indexMap = {};\n        if (keys.length == 1) {\n            var index = keys[0];\n            var element = elements[index];\n            for (var i = 0; i < index; ++i) {\n                newElements[i] = this.collection[i];\n                indexMap[i] = i;\n            }\n            newElements[index] = element;\n            for (var i = index + 1; i < newElements.length; ++i) {\n                newElements[i] = this.collection[i - 1];\n                indexMap[i - 1] = i;\n            }\n        }\n        else {\n            for (var i = 0; i < keys[0]; ++i) {\n                newElements[i] = this.collection[i];\n                indexMap[i] = i;\n            }\n            newElements[keys[0]] = elements[keys[0]];\n            for (var i = 1; i < keys.length; ++i) {\n                var indexPrevious = keys[i - 1];\n                var index = keys[i];\n                for (var j = indexPrevious + 1; j < index; ++j) {\n                    newElements[j] = this.collection[j - i];\n                    indexMap[j - i] = j;\n                }\n                newElements[index] = elements[index];\n            }\n            for (var i = keys[keys.length - 1] + 1; i < newElements.length; ++i) {\n                newElements[i] = this.collection[i - keys.length];\n                indexMap[i - keys.length] = i;\n            }\n        }\n        this.internalTryToChangeCollection(indexMap, newElements);\n    }\n    internalRemoveElements(indexes) {\n        indexes = indexes.sort(function (number1, number2) {\n            return number1 - number2;\n        });\n        var indexMap = {};\n        var newElements = new Array();\n        var counter = 0;\n        for (var i = 0; i < this.collection.length; ++i) {\n            if (indexes[counter] == i)\n                ++counter;\n            else {\n                newElements[i - counter] = this.collection[i];\n                indexMap[i] = i - counter;\n            }\n        }\n        this.internalTryToChangeCollection(indexMap, newElements);\n    }\n    internalTryToChangeCollection(indexMap = {}, newElements) {\n        var cancelableChangeEventArgs = new CancelableCollectionChangeEventArgs(indexMap, newElements);\n        this.eventEmitter.emit(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, cancelableChangeEventArgs);\n        if (!cancelableChangeEventArgs.getPreventDefault())\n            this.collection = newElements;\n        var changeEventArgs = new CollectionChangeEventArgs(indexMap, newElements, cancelableChangeEventArgs.getPreventDefault());\n        this.eventEmitter.emit(COLLECTION_MANAGER_EVENTS.collectionAfterChange, changeEventArgs);\n        return changeEventArgs;\n    }\n    removeElements(indexes) {\n        this.internalRemoveElements(indexes);\n    }\n}\n\n//# sourceMappingURL=collection-manager.js.map\n","import { CollectionManager } from \"./collection-manager\";\nexport class HtmlChildrenManager extends CollectionManager {\n    constructor(collection, eventEmitter, parentElement) {\n        super(collection, eventEmitter);\n        this.parentElement = parentElement;\n    }\n    internalTryToChangeCollection(indexMap = {}, newElements) {\n        var eventArgs = super.internalTryToChangeCollection(indexMap, newElements);\n        if (!eventArgs.getPreventDefault()) {\n            var deletionPivot = 0;\n            var insertionPivot = 0;\n            var oldIndexesCounter = 0;\n            var newIndexesCounter = 0;\n            for (var key in indexMap) {\n                var keyNumber = Number(key);\n                for (var i = oldIndexesCounter; i < keyNumber; ++i) {\n                    this.parentElement.removeChild(this.parentElement.children[i + insertionPivot - deletionPivot]);\n                    ++deletionPivot;\n                }\n                var newIndex = indexMap[key];\n                for (var i = newIndexesCounter; i < newIndex; ++i) {\n                    this.parentElement.insertBefore(newElements[i], this.parentElement.children[i]);\n                    ++insertionPivot;\n                }\n                oldIndexesCounter = keyNumber + 1;\n                newIndexesCounter = newIndex + 1;\n            }\n            for (var i = newIndexesCounter; i < newElements.length; ++i)\n                this.parentElement.appendChild(newElements[i]);\n        }\n        return eventArgs;\n    }\n}\n\n//# sourceMappingURL=html-children-manager.js.map\n","import { SingleSlideCarouselTests } from './test/carousel/carousel-basic.test';\nimport { CollectionManagerTests } from './test/collection/collection-manager.test';\nvar soraTest = function () {\n    return {\n        performTests: function () {\n            new SingleSlideCarouselTests().performTests();\n            new CollectionManagerTests().performTests();\n        },\n    };\n}();\nmodule.exports = soraTest;\n\n//# sourceMappingURL=main.test.js.map\n","import { EventEmitter } from \"events\";\nimport { CarouselBase } from \"../carousel/carousel-base\";\nimport { AnimationPlayStateValue } from \"../carousel/animation/animation-play-state\";\nimport { OperationManager } from \"./operation-manager\";\nimport { TaskEngine } from \"./task-engine\";\nexport const ANIMATION_OPERATION_EVENTS = {\n    ANIMATION_CANCEL: 'anim.cancel',\n    ANIMATION_STATE_CHANGE: 'anim.state.change',\n};\nexport class SingleAnimationEngine extends TaskEngine {\n    constructor() {\n        super();\n        this.eventEmitter = new EventEmitter();\n        this.animationCancelManager = new OperationManager(ANIMATION_OPERATION_EVENTS.ANIMATION_CANCEL, this.eventEmitter);\n        this.animationStateChangeManager = new OperationManager(ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE, this.eventEmitter);\n    }\n    dispose() {\n        this.animationCancelManager.dispose();\n        this.animationStateChangeManager.dispose();\n    }\n    handleTaskPart(part) {\n        var that = this;\n        part.pendingOperations = {\n            cancel: false,\n            pause: false,\n        };\n        this.animationCancelManager.subscribe(part.alias, function (eventArgs) {\n            part.pendingOperations.cancel = true;\n            that.animationCancelManager.unsubscribe(part.alias);\n        });\n        this.animationStateChangeManager.subscribe(part.alias, function (eventArgs) {\n            part.pendingOperations.pause = eventArgs.value == AnimationPlayStateValue.paused;\n        });\n        return super.handleTaskPart(part);\n    }\n    performTask(part) {\n        this.animationCancelManager.unsubscribe(part.alias);\n        this.animationStateChangeManager.unsubscribe(part.alias);\n        var promises = new Array(part.elements.length);\n        for (var i = 0; i < part.elements.length; ++i)\n            promises[i] = this.handleAnimationOverElement(part.elements[i], part);\n        if (part.pendingOperations) {\n            if (part.pendingOperations.pause)\n                this.pause([part.alias]);\n            if (part.pendingOperations.cancel)\n                this.cancelAnimation([part.alias]);\n        }\n        return Promise.all(promises);\n    }\n    handleAnimationOverElement(element, part) {\n        var styles = part.styles;\n        if (styles) {\n            if (styles.length < 1)\n                throw new Error('It\\'s required to have at least one class to generate an animation.');\n        }\n        else\n            throw new Error('It\\'s required to have an array of styles to generate an animation.');\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                var animationFunctions = new Array();\n                var currentAnimationIndex = null;\n                var onAnimationCancel = function (args) {\n                    element.classList.add(CarouselBase.CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    if (currentAnimationIndex != null)\n                        element.classList.remove(styles[currentAnimationIndex]);\n                    that.unregisterAnimationListener(element, animationFunctions[currentAnimationIndex]);\n                    element.classList.remove(CarouselBase.CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    that.animationCancelManager.unsubscribe(part.alias);\n                    that.animationStateChangeManager.unsubscribe(part.alias);\n                    resolve();\n                };\n                that.animationCancelManager.subscribe(part.alias, onAnimationCancel);\n                var onAnimationPlayStateChange = function (args) {\n                    if (AnimationPlayStateValue.paused == args.value) {\n                        if (!element.classList.contains(CarouselBase.CAROUSEL_STYLES.ANIMATION_PAUSED))\n                            element.classList.add(CarouselBase.CAROUSEL_STYLES.ANIMATION_PAUSED);\n                    }\n                    else if (AnimationPlayStateValue.running == args.value) {\n                        if (element.classList.contains(CarouselBase.CAROUSEL_STYLES.ANIMATION_PAUSED))\n                            element.classList.remove(CarouselBase.CAROUSEL_STYLES.ANIMATION_PAUSED);\n                    }\n                };\n                that.animationStateChangeManager.subscribe(part.alias, onAnimationPlayStateChange);\n                for (var i = 1; i < styles.length; ++i) {\n                    animationFunctions.push(function (index) {\n                        return function (event) {\n                            element.classList.remove(styles[index - 1]);\n                            that.unregisterAnimationListener(element, animationFunctions[index - 1]);\n                            that.registerAnimationListener(element, animationFunctions[index]);\n                            element.classList.add(styles[index]);\n                            currentAnimationIndex = index;\n                        };\n                    }(i));\n                }\n                animationFunctions.push(function (event) {\n                    element.classList.add(CarouselBase.CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    element.classList.remove(styles[styles.length - 1]);\n                    element.classList.remove(CarouselBase.CAROUSEL_STYLES.CLEAR_ANIMATION);\n                    that.unregisterAnimationListener(element, animationFunctions[animationFunctions.length - 1]);\n                    currentAnimationIndex = null;\n                    that.animationCancelManager.unsubscribe(part.alias);\n                    that.animationStateChangeManager.unsubscribe(part.alias);\n                    resolve();\n                });\n                that.registerAnimationListener(element, animationFunctions[0]);\n                element.classList.add(styles[0]);\n                currentAnimationIndex = 0;\n            }\n            catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n    registerAnimationListener(element, listener) {\n        element.addEventListener('animationend', listener);\n        element.addEventListener('webkitAnimationEnd', listener);\n    }\n    unregisterAnimationListener(element, listener) {\n        element.removeEventListener('animationend', listener);\n        element.removeEventListener('webkitAnimationEnd', listener);\n    }\n    cancelAnimation(aliases) {\n        this.eventEmitter.emit(ANIMATION_OPERATION_EVENTS.ANIMATION_CANCEL, {\n            aliases: aliases,\n        });\n    }\n    pause(aliases) {\n        this.eventEmitter.emit(ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE, {\n            aliases: aliases,\n            value: AnimationPlayStateValue.paused,\n        });\n    }\n    resume(aliases) {\n        this.eventEmitter.emit(ANIMATION_OPERATION_EVENTS.ANIMATION_STATE_CHANGE, {\n            aliases: aliases,\n            value: AnimationPlayStateValue.running,\n        });\n    }\n}\n\n//# sourceMappingURL=animation-engine.js.map\n","export class OperationManager {\n    constructor(eventAlias, eventEmitter) {\n        var that = this;\n        this.callFunction = function (eventArgs) {\n            if (eventArgs.aliases == null)\n                for (var alias in that.suscriptionStorage) {\n                    var subscriber = that.suscriptionStorage[alias];\n                    if (subscriber != null)\n                        subscriber(eventArgs);\n                }\n            else\n                for (var i = 0; i < eventArgs.aliases.length; ++i) {\n                    var subscriber = that.suscriptionStorage[eventArgs.aliases[i]];\n                    if (subscriber != null)\n                        subscriber(eventArgs);\n                }\n        };\n        this.eventAlias = eventAlias;\n        this.eventEmitter = eventEmitter;\n        this.suscriptionStorage = {};\n        this.eventEmitter.addListener(this.eventAlias, this.callFunction);\n    }\n    dispose() {\n        this.eventEmitter.removeListener(this.eventAlias, this.callFunction);\n    }\n    subscribe(alias, handler) {\n        this.suscriptionStorage[alias] = handler;\n    }\n    unsubscribe(alias) {\n        delete this.suscriptionStorage[alias];\n    }\n}\n\n//# sourceMappingURL=operation-manager.js.map\n","import { EventEmitter } from \"events\";\nexport const TASK_CONSTRAINT_TYPES = {\n    END: 'anim.end',\n    GROUP: 'group',\n    START: 'anim.start',\n    WAIT_FOR: 'wait',\n};\nconst TASK_PART_WHEN_EVENT_PREFIXES = {\n    START: 'anim.start.',\n    END: 'anim.end.',\n};\nexport var TaskPartWhenOperator;\n(function (TaskPartWhenOperator) {\n    TaskPartWhenOperator[TaskPartWhenOperator[\"AND\"] = 0] = \"AND\";\n    TaskPartWhenOperator[TaskPartWhenOperator[\"OR\"] = 1] = \"OR\";\n})(TaskPartWhenOperator || (TaskPartWhenOperator = {}));\nexport class TaskPartWhenConstraint {\n    constructor(after, constraintType) {\n        this.after = after;\n        this.constraintType = constraintType;\n    }\n}\nexport class TaskPartConstraint extends TaskPartWhenConstraint {\n    constructor(after, alias, constraintType) {\n        super(after, constraintType);\n        this.alias = alias;\n    }\n}\nexport class TaskPartBeginConstraint extends TaskPartConstraint {\n    constructor(after, alias) {\n        super(after, alias, TASK_CONSTRAINT_TYPES.START);\n    }\n}\nexport class TaskPartEndConstraint extends TaskPartConstraint {\n    constructor(after, alias) {\n        super(after, alias, TASK_CONSTRAINT_TYPES.END);\n    }\n}\nexport class TaskTimeConstraint extends TaskPartWhenConstraint {\n    constructor(after, millis) {\n        super(after, TASK_CONSTRAINT_TYPES.WAIT_FOR);\n        this.millis = millis;\n    }\n}\nexport class TaskGroupConstraint extends TaskPartWhenConstraint {\n    constructor(after, constraints, operator) {\n        super(after, TASK_CONSTRAINT_TYPES.GROUP);\n        this.constraints = constraints;\n        this.operator = operator;\n    }\n}\nexport class TaskEngine {\n    constructor() {\n        this.eventEmitter = new EventEmitter();\n    }\n    handle(taskFlow) {\n        if (taskFlow == null)\n            throw new Error('It\\'s required a task flow.');\n        if (taskFlow.parts == null)\n            throw new Error('It\\'s required a task flow with parts.');\n        this.currentTask = taskFlow;\n        var partPromises = new Array(taskFlow.parts.length);\n        for (var i = 0; i < taskFlow.parts.length; ++i)\n            partPromises[i] = this.handleTaskPart(taskFlow.parts[i]);\n        return partPromises;\n    }\n    handleTaskPart(part) {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            that.handleTaskPartWhen(part.when).then(function () {\n                that.eventEmitter.emit(TASK_PART_WHEN_EVENT_PREFIXES.START + part.alias, {});\n                var promise = that.performTask(part);\n                promise.then(function () {\n                    that.eventEmitter.emit(TASK_PART_WHEN_EVENT_PREFIXES.END + part.alias, {});\n                    resolve();\n                });\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    }\n    handleTaskPartWhen(whenEntity) {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            if (whenEntity == null)\n                resolve();\n            else\n                switch (whenEntity.constraintType) {\n                    case TASK_CONSTRAINT_TYPES.START:\n                        that.handleTaskPartWhenPartBegins(whenEntity)\n                            .then(resolve);\n                        break;\n                    case TASK_CONSTRAINT_TYPES.END:\n                        that.handleTaskPartWhenPartEnds(whenEntity)\n                            .then(resolve);\n                        break;\n                    case TASK_CONSTRAINT_TYPES.GROUP:\n                        that.handleTaskPartWhenPartGroup(whenEntity)\n                            .then(resolve);\n                        break;\n                    case TASK_CONSTRAINT_TYPES.WAIT_FOR:\n                        that.handleTaskPartWhenWaitFor(whenEntity)\n                            .then(resolve);\n                        break;\n                    default:\n                        throw new Error('Unexpected when entity type.');\n                }\n        });\n    }\n    handleTaskPartWhenPartBegins(whenEntity) {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var eventName = TASK_PART_WHEN_EVENT_PREFIXES.START + whenEntity.alias;\n            var eventHandler = function () {\n                that.eventEmitter.removeListener(eventName, eventHandler);\n                if (whenEntity.after == null)\n                    resolve();\n                else\n                    that.handleTaskPartWhen(whenEntity.after)\n                        .then(resolve);\n            };\n            that.eventEmitter.addListener(eventName, eventHandler);\n        });\n    }\n    handleTaskPartWhenPartEnds(whenEntity) {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var eventName = TASK_PART_WHEN_EVENT_PREFIXES.END + whenEntity.alias;\n            var eventHandler = function () {\n                that.eventEmitter.removeListener(eventName, eventHandler);\n                if (whenEntity.after == null)\n                    resolve();\n                else\n                    that.handleTaskPartWhen(whenEntity.after)\n                        .then(resolve);\n            };\n            that.eventEmitter.addListener(eventName, eventHandler);\n        });\n    }\n    handleTaskPartWhenPartGroup(whenEntity) {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var childPromises = new Array(whenEntity.constraints.length);\n            for (var i = 0; i < whenEntity.constraints.length; ++i) {\n                childPromises[i] = new Promise(function (resolve, reject) {\n                    that.handleTaskPartWhen(whenEntity.constraints[i])\n                        .then(resolve);\n                });\n            }\n            if (TaskPartWhenOperator.AND == whenEntity.operator)\n                Promise.all(childPromises)\n                    .then(function () {\n                    resolve();\n                });\n            else if (TaskPartWhenOperator.OR == whenEntity.operator)\n                Promise.race(childPromises)\n                    .then(function () {\n                    resolve();\n                });\n            else\n                reject('Unexpected operator.');\n        });\n    }\n    handleTaskPartWhenWaitFor(whenEntity) {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                if (whenEntity.after == null) {\n                    resolve();\n                }\n                else {\n                    that.handleTaskPartWhen(whenEntity.after)\n                        .then(resolve);\n                }\n            }, whenEntity.millis);\n        });\n    }\n}\n\n//# sourceMappingURL=task-engine.js.map\n","import { CarouselBase } from '../../../src/carousel/carousel-base';\nimport { CarouselBasic } from '../../../src/carousel/carousel-basic';\nexport class SingleSlideCarouselTests {\n    constructor() {\n        this.longTimeLimit = 100000000;\n    }\n    generateBasicCarousel() {\n        var divElement = document.createElement('div');\n        divElement.classList.add(CarouselBase.CAROUSEL_STYLES.CAROUSEL);\n        divElement.innerHTML =\n            `<div class=\"sora-wrapper\">\r\n    <div class=\"sora-slide\">\r\n        <span>Content 1</span>\r\n    </div>\r\n    <div class=\"sora-slide\">\r\n        <span>Content 2</span>\r\n    </div>\r\n    <div class=\"sora-slide\">\r\n        <span>Content 3</span>\r\n    </div>\r\n</div>`;\n        return divElement;\n    }\n    performTests() {\n        describe('SingleSlideCarousel Tests', () => {\n            this.itMustBeInitializable();\n            this.itMustBeAbleToCancelAnimation();\n            this.itMustBeAbleToGoToSlides();\n            this.itMustBeAbleToGoToSlidesWhileAddingElements();\n            this.itMustBeAbleToGoToSlidesWhileRemovingAnimationElements();\n            this.itMustBeAbleToGoToSlidesWhileRemovingOtherElements();\n            this.itMustBeAbleToHandleChildrenAnimations();\n            this.itMustBeAbleToPauseAndResumeAnimation();\n            this.itMustBeAbleToRunComplexAnimations();\n        });\n    }\n    performGoAndCheck(action, carousel, enterAnimation, leaveAnimation, shouldCheck = true) {\n        expect([\n            CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_NEXT,\n            CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_PREVIOUS,\n        ]).toContain(action);\n        var currentActiveElement = carousel.getActiveElement();\n        var activeIndex = carousel.getActiveIndex();\n        var indexes = carousel.getElementsManager().getLength();\n        var nextIndex = function (action) {\n            if (CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_NEXT == action)\n                return (activeIndex + 1) % indexes;\n            else if (CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_PREVIOUS == action) {\n                return ((activeIndex - 1) + indexes) % indexes;\n            }\n            else\n                throw new Error('Unexpected action');\n        }(action);\n        var nextElement = carousel.getElementsManager().getCollection()[nextIndex];\n        var goActionStatus = carousel.handle(action, {\n            enterAnimation: enterAnimation,\n            leaveAnimation: leaveAnimation,\n        });\n        if (shouldCheck)\n            goActionStatus.soraHandlerStatus.then(function () {\n                expect(currentActiveElement.classList).not.toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                expect(currentActiveElement.classList).toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                expect(nextElement.classList).toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                expect(nextElement.classList).not.toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            });\n        return {\n            goActionStatus: goActionStatus,\n            newElement: nextElement,\n            oldElement: currentActiveElement,\n        };\n    }\n    performGoNext(carousel, enterAnimation, leaveAnimation, shouldCheck = true) {\n        return this.performGoAndCheck(CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_NEXT, carousel, enterAnimation, leaveAnimation, shouldCheck);\n    }\n    performGoPrevious(carousel, enterAnimation, leaveAnimation, shouldCheck = true) {\n        return this.performGoAndCheck(CarouselBasic.SINGLE_SLIDE_CAROUSEL_ACTIONS.GO_TO_PREVIOUS, carousel, enterAnimation, leaveAnimation, shouldCheck);\n    }\n    itMustBeInitializable() {\n        var that = this;\n        it('mustBeInitializable', () => {\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            expect(carousel).not.toBeNull();\n            var wrapper = divElement.querySelectorAll('.' + CarouselBase.CAROUSEL_STYLES.WRAPPER);\n            expect(wrapper.length).toBe(1);\n            var children = divElement.querySelectorAll('.' + CarouselBase.CAROUSEL_STYLES.WRAPPER + ' > .' + CarouselBase.CAROUSEL_STYLES.SLIDE);\n            expect(children.length).toBe(3);\n            expect(children[0].classList).toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n            expect(children[0].classList).not.toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            for (var i = 1; i < children.length; ++i) {\n                expect(children[i].classList).not.toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                expect(children[i].classList).toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n            }\n        });\n    }\n    itMustBeAbleToCancelAnimation() {\n        var that = this;\n        it('mustBeAbleToCancelAnimation', (done) => {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, { slideStyles: ['sora-fade-in-animation',] }, { slideStyles: ['sora-fade-out-animation',] }, false);\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var animationStatus = goNext(carousel);\n                carousel.forceActiveSlide(2);\n                var thirdElement = carousel.getElementsManager().getCollection()[2];\n                expect(thirdElement.classList).not.toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                expect(thirdElement.classList).toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    var oldActiveElement = animationStatus.oldElement;\n                    var newActiveElement = animationStatus.newElement;\n                    expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                    expect(newActiveElement.classList).not.toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                    expect(newActiveElement.classList).toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                    expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                    expect(oldActiveElement.classList).not.toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_ACTIVE);\n                    expect(oldActiveElement.classList).toContain(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                    resolve();\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        });\n    }\n    itMustBeAbleToGoToSlides() {\n        var that = this;\n        it('mustBeAbleToGoToSlides', function (done) {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, { slideStyles: ['sora-fade-in-animation',] }, { slideStyles: ['sora-fade-out-animation',] });\n            }\n            function goPrevious(carousel) {\n                return that.performGoPrevious(carousel, { slideStyles: ['sora-fade-in-animation',] }, { slideStyles: ['sora-fade-out-animation',] });\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var animationStatus = goNext(carousel);\n                var oldActiveElement = animationStatus.oldElement;\n                var newActiveElement = animationStatus.newElement;\n                expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    var animationStatus = goPrevious(carousel);\n                    var oldActiveElement = animationStatus.oldElement;\n                    var newActiveElement = animationStatus.newElement;\n                    expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                    expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                    Promise.all([\n                        animationStatus.goActionStatus.soraHandlerStatus,\n                    ]).then(function () {\n                        resolve();\n                    }).catch(function (err) {\n                        reject(err);\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        }, this.longTimeLimit);\n    }\n    itMustBeAbleToGoToSlidesWhileAddingElements() {\n        var that = this;\n        it('mustBeAbleToGoToSlidesWhileAddingElements', function (done) {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, { slideStyles: ['sora-fade-in-animation',] }, { slideStyles: ['sora-fade-out-animation',] });\n            }\n            function goPrevious(carousel) {\n                return that.performGoPrevious(carousel, { slideStyles: ['sora-fade-in-animation',] }, { slideStyles: ['sora-fade-out-animation',] });\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var animationStatus = goNext(carousel);\n                var element0 = document.createElement('div');\n                element0.classList.add(CarouselBase.CAROUSEL_STYLES.SLIDE);\n                element0.classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                element0.innerHTML = 'New Content 0';\n                var element1 = document.createElement('div');\n                element1.classList.add(CarouselBase.CAROUSEL_STYLES.SLIDE);\n                element1.classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                element1.innerHTML = 'New Content 1';\n                var element2 = document.createElement('div');\n                element2.classList.add(CarouselBase.CAROUSEL_STYLES.SLIDE);\n                element2.classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                element2.innerHTML = 'New Content 2';\n                var element3 = document.createElement('div');\n                element3.classList.add(CarouselBase.CAROUSEL_STYLES.SLIDE);\n                element3.classList.add(CarouselBasic.SINGLE_SLIDE_CAROUSEL_STYLES.SLIDE_HIDDEN);\n                element3.innerHTML = 'New Content 3';\n                carousel.getElementsManager().insertElements({\n                    0: element0,\n                    1: element1,\n                    2: element2,\n                    3: element3,\n                });\n                expect(carousel.getElementsManager().getLength()).toBe(7);\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    var oldActiveElement = animationStatus.oldElement;\n                    var newActiveElement = animationStatus.newElement;\n                    expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[5]);\n                    expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[4]);\n                    animationStatus = goPrevious(carousel);\n                    Promise.all([\n                        animationStatus.goActionStatus.soraHandlerStatus,\n                    ]).then(function () {\n                        var oldActiveElement = animationStatus.oldElement;\n                        var newActiveElement = animationStatus.newElement;\n                        expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[4]);\n                        expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[5]);\n                        animationStatus = goPrevious(carousel);\n                        Promise.all([\n                            animationStatus.goActionStatus.soraHandlerStatus,\n                        ]).then(function () {\n                            var oldActiveElement = animationStatus.oldElement;\n                            var newActiveElement = animationStatus.newElement;\n                            expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[3]);\n                            expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[4]);\n                            resolve();\n                        }).catch(function (err) {\n                            reject(err);\n                        });\n                    }).catch(function (err) {\n                        reject(err);\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        }, this.longTimeLimit);\n    }\n    itMustBeAbleToGoToSlidesWhileRemovingAnimationElements() {\n        var that = this;\n        it('mustBeAbleToGoToSlidesWhileRemovingAnimationElements', function (done) {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, { slideStyles: ['sora-fade-in-animation',] }, { slideStyles: ['sora-fade-out-animation',] });\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var animationStatus = goNext(carousel);\n                carousel.getElementsManager().removeElements([0, 1]);\n                expect(carousel.getElementsManager().getCollection().length).toBe(3);\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    var oldActiveElement = animationStatus.oldElement;\n                    var newActiveElement = animationStatus.newElement;\n                    expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                    expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                    resolve();\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        }, this.longTimeLimit);\n    }\n    itMustBeAbleToGoToSlidesWhileRemovingOtherElements() {\n        var that = this;\n        it('mustBeAbleToGoToSlidesWhileRemovingOtherElements', function (done) {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, { slideStyles: ['sora-fade-in-animation',] }, { slideStyles: ['sora-fade-out-animation',] });\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var animationStatus = goNext(carousel);\n                carousel.getElementsManager().removeElements([2]);\n                expect(carousel.getElementsManager().getCollection().length).toBe(2);\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    var oldActiveElement = animationStatus.oldElement;\n                    var newActiveElement = animationStatus.newElement;\n                    expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                    expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                    resolve();\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        }, this.longTimeLimit);\n    }\n    itMustBeAbleToHandleChildrenAnimations() {\n        var that = this;\n        it('mustBeAbleToHandleChildrenAnimations', function (done) {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, {\n                    slideStyles: ['sora-fade-in-animation',],\n                    childrenStyles: [{\n                            selector: 'span',\n                            styles: ['sora-fade-in-animation',],\n                        }],\n                }, {\n                    slideStyles: ['sora-fade-out-animation',],\n                    childrenStyles: [{\n                            selector: 'span',\n                            styles: ['sora-fade-out-animation',],\n                        }],\n                });\n            }\n            function goPrevious(carousel) {\n                return that.performGoPrevious(carousel, {\n                    slideStyles: ['sora-fade-in-animation',],\n                    childrenStyles: [{\n                            selector: 'span',\n                            styles: ['sora-fade-in-animation',],\n                        }],\n                }, {\n                    slideStyles: ['sora-fade-out-animation',],\n                    childrenStyles: [{\n                            selector: 'span',\n                            styles: ['sora-fade-out-animation',],\n                        }],\n                });\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var animationStatus = goNext(carousel);\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    var oldActiveElement = animationStatus.oldElement;\n                    var newActiveElement = animationStatus.newElement;\n                    expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                    expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                    animationStatus = goPrevious(carousel);\n                    Promise.all([\n                        animationStatus.goActionStatus.soraHandlerStatus,\n                    ]).then(function () {\n                        var oldActiveElement = animationStatus.oldElement;\n                        var newActiveElement = animationStatus.newElement;\n                        expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                        expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                        resolve();\n                    }).catch(function (err) {\n                        reject(err);\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        }, this.longTimeLimit);\n    }\n    itMustBeAbleToPauseAndResumeAnimation() {\n        var that = this;\n        it('mustBeAbleToPauseAndResumeAnimation', function (done) {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, { slideStyles: ['sora-fade-in-animation', 'sora-offset-left-in-animation',] }, { slideStyles: ['sora-fade-out-animation', 'sora-offset-left-out-animation',] });\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var currentIndex = carousel.getActiveIndex();\n                var animationStatus = goNext(carousel);\n                var oldActiveElement = animationStatus.oldElement;\n                var newActiveElement = animationStatus.newElement;\n                expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                carousel.pause();\n                expect(carousel.isPaused()).toBe(true);\n                expect(carousel.getActiveIndex()).toBe(currentIndex);\n                new Promise(function (resolveCh, reject) {\n                    setTimeout(() => {\n                        expect(carousel.isPaused()).toBe(true);\n                        expect(carousel.getActiveIndex()).toBe(currentIndex);\n                        resolveCh();\n                    }, 2000);\n                }).then(function () {\n                    carousel.resume();\n                });\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    resolve();\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        }, this.longTimeLimit);\n    }\n    itMustBeAbleToRunComplexAnimations() {\n        var that = this;\n        it('mustBeAbleToRunComplexAnimations', function (done) {\n            function goNext(carousel) {\n                return that.performGoNext(carousel, { slideStyles: ['sora-fade-in-animation', 'sora-offset-left-in-animation',] }, { slideStyles: ['sora-fade-out-animation', 'sora-offset-left-out-animation',] });\n            }\n            function goPrevious(carousel) {\n                return that.performGoPrevious(carousel, { slideStyles: ['sora-fade-in-animation', 'sora-offset-left-in-animation',] }, { slideStyles: ['sora-fade-out-animation', 'sora-offset-left-out-animation',] });\n            }\n            var divElement = that.generateBasicCarousel();\n            var carousel = new CarouselBasic.SingleSlideCarousel(divElement, { index: 0 });\n            document.body.appendChild(divElement);\n            var executionPromise = new Promise(function (resolve, reject) {\n                var animationStatus = goNext(carousel);\n                var oldActiveElement = animationStatus.oldElement;\n                var newActiveElement = animationStatus.newElement;\n                expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                Promise.all([\n                    animationStatus.goActionStatus.soraHandlerStatus,\n                ]).then(function () {\n                    var animationStatus = goPrevious(carousel);\n                    var oldActiveElement = animationStatus.oldElement;\n                    var newActiveElement = animationStatus.newElement;\n                    expect(oldActiveElement).toBe(carousel.getElementsManager().getCollection()[1]);\n                    expect(newActiveElement).toBe(carousel.getElementsManager().getCollection()[0]);\n                    Promise.all([\n                        animationStatus.goActionStatus.soraHandlerStatus,\n                    ]).then(function () {\n                        resolve();\n                    }).catch(function (err) {\n                        reject(err);\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n            executionPromise.then(function () {\n                document.body.removeChild(divElement);\n                done();\n            }).catch(function (err) {\n                done.fail(err);\n            });\n        }, this.longTimeLimit);\n    }\n}\n\n//# sourceMappingURL=carousel-basic.test.js.map\n","import { CollectionManager, COLLECTION_MANAGER_EVENTS } from '../../../src/collection/collection-manager';\nimport { EventEmitter } from 'events';\nexport class CollectionManagerTests {\n    constructor() {\n    }\n    performTests() {\n        describe('Collection Manager Tests', () => {\n            this.itMustBeInitializable();\n            this.itMustBeAbleToAddElements();\n            this.itMustBeAbleToPreventDefaultActionWhenAddingElements();\n            this.itMustBeAbleToPreventDefaultActionWhenRemovingElements();\n            this.itMustBeAbleToRemoveElements();\n        });\n    }\n    itMustBeInitializable() {\n        it('mustBeInitializable', () => {\n            var collection = new Array();\n            var eventEmitter = new EventEmitter();\n            var collectionManager = new CollectionManager(collection, eventEmitter);\n            expect(collectionManager).not.toBeNull();\n            expect(collectionManager.getCollection()).toBe(collection);\n        });\n    }\n    itMustBeAbleToAddElements() {\n        it('mustBeAbleToAddElements', () => {\n            var collection = [2, 5, 7];\n            var eventEmitter = new EventEmitter();\n            var beforeIsEmitted = false;\n            var afterIsEmitted = false;\n            var expected = [2, 10, 5, 8, 7];\n            var collectionManager = new CollectionManager(collection, eventEmitter);\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, function (eventArgs) {\n                var indexMap = eventArgs.getIndexMap();\n                for (var i = 0; i < collection.length; ++i)\n                    expect(indexMap[i]).not.toBeNull();\n                beforeIsEmitted = true;\n            });\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionAfterChange, function (eventArgs) {\n                afterIsEmitted = true;\n            });\n            collectionManager.insertElements({\n                1: 10,\n                3: 8,\n            });\n            expect(beforeIsEmitted && afterIsEmitted).toBe(true);\n            var actual = collectionManager.getCollection();\n            expect(actual.length).toBe(expected.length);\n            for (var i = 0; i < expected.length; ++i)\n                expect(actual[i]).toBe(expected[i]);\n        });\n    }\n    itMustBeAbleToPreventDefaultActionWhenAddingElements() {\n        it('mustBeAbleToPreventDefaultActionWhenAddingElements', () => {\n            var collection = [2, 5, 7];\n            var eventEmitter = new EventEmitter();\n            var beforeIsEmitted = false;\n            var afterIsEmitted = false;\n            var expected = [2, 5, 7];\n            var collectionManager = new CollectionManager(collection, eventEmitter);\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, function (eventArgs) {\n                beforeIsEmitted = true;\n                eventArgs.setPreventDefault();\n            });\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionAfterChange, function (eventArgs) {\n                afterIsEmitted = true;\n                expect(eventArgs.getPreventDefault()).toBe(true);\n            });\n            collectionManager.insertElements({\n                1: 10,\n                3: 8,\n            });\n            expect(beforeIsEmitted && afterIsEmitted).toBe(true);\n            var actual = collectionManager.getCollection();\n            expect(actual.length).toBe(expected.length);\n            for (var i = 0; i < expected.length; ++i)\n                expect(actual[i]).toBe(expected[i]);\n        });\n    }\n    itMustBeAbleToPreventDefaultActionWhenRemovingElements() {\n        it('mustBeAbleToPreventDefaultActionWhenRemovingElements', () => {\n            var collection = [2, 10, 5, 8, 7];\n            var eventEmitter = new EventEmitter();\n            var beforeIsEmitted = false;\n            var afterIsEmitted = false;\n            var indexesToBeRemoved = [1, 3];\n            var expected = [2, 10, 5, 8, 7];\n            var collectionManager = new CollectionManager(collection, eventEmitter);\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, function (eventArgs) {\n                eventArgs.setPreventDefault();\n                beforeIsEmitted = true;\n            });\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionAfterChange, function (eventArgs) {\n                expect(eventArgs.getPreventDefault()).toBe(true);\n                afterIsEmitted = true;\n            });\n            collectionManager.removeElements(indexesToBeRemoved);\n            expect(beforeIsEmitted && afterIsEmitted).toBe(true);\n            var actual = collectionManager.getCollection();\n            expect(actual.length).toBe(expected.length);\n            for (var i = 0; i < expected.length; ++i)\n                expect(actual[i]).toBe(expected[i]);\n        });\n    }\n    itMustBeAbleToRemoveElements() {\n        it('mustBeAbleToRemoveElements', () => {\n            var collection = [2, 10, 5, 8, 7];\n            var eventEmitter = new EventEmitter();\n            var beforeIsEmitted = false;\n            var afterIsEmitted = false;\n            var indexesToBeRemoved = [1, 3];\n            var expected = [2, 5, 7];\n            var collectionManager = new CollectionManager(collection, eventEmitter);\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionBeforeChange, function (eventArgs) {\n                var indexMap = eventArgs.getIndexMap();\n                for (var i = 0; i < indexesToBeRemoved.length; ++i)\n                    expect(indexMap[indexesToBeRemoved[i]]).toBeUndefined();\n                beforeIsEmitted = true;\n            });\n            eventEmitter.on(COLLECTION_MANAGER_EVENTS.collectionAfterChange, function (eventArgs) {\n                afterIsEmitted = true;\n            });\n            collectionManager.removeElements(indexesToBeRemoved);\n            expect(beforeIsEmitted && afterIsEmitted).toBe(true);\n            var actual = collectionManager.getCollection();\n            expect(actual.length).toBe(expected.length);\n            for (var i = 0; i < expected.length; ++i)\n                expect(actual[i]).toBe(expected[i]);\n        });\n    }\n}\n\n//# sourceMappingURL=collection-manager.test.js.map\n","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/get-own-property-descriptor\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/promise\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","\"use strict\";\n\nexports.__esModule = true;\n\nvar _getPrototypeOf = require(\"../core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _getOwnPropertyDescriptor = require(\"../core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);\n\n  if (desc === undefined) {\n    var parent = (0, _getPrototypeOf2.default)(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","require('../../modules/es6.object.get-own-property-descriptor');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function getOwnPropertyDescriptor(it, key) {\n  return $Object.getOwnPropertyDescriptor(it, key);\n};\n","require('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nrequire('../modules/es7.promise.finally');\nrequire('../modules/es7.promise.try');\nmodule.exports = require('../modules/_core').Promise;\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = true;\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n","module.exports = require('./_hide');\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n",null,"'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}